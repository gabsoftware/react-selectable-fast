{"version":3,"file":"index.js","mappings":"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","sources":["webpack://React-Selectable-Fast/webpack/universalModuleDefinition","webpack://React-Selectable-Fast/external umd {\"root\":\"React\",\"commonjs2\":\"react\",\"commonjs\":\"react\",\"amd\":\"react\"}","webpack://React-Selectable-Fast/webpack/bootstrap","webpack://React-Selectable-Fast/webpack/runtime/compat get default export","webpack://React-Selectable-Fast/webpack/runtime/define property getters","webpack://React-Selectable-Fast/webpack/runtime/hasOwnProperty shorthand","webpack://React-Selectable-Fast/webpack/runtime/make namespace object","webpack://React-Selectable-Fast/./src/utils/index.ts","webpack://React-Selectable-Fast/./src/utils/getBoundsForNode.ts","webpack://React-Selectable-Fast/./src/utils/castTouchToMouseEvent.ts","webpack://React-Selectable-Fast/./src/utils/detectMouseButton.ts","webpack://React-Selectable-Fast/./src/utils/nodeInRoot.ts","webpack://React-Selectable-Fast/./src/utils/doObjectsCollide.ts","webpack://React-Selectable-Fast/./src/SelectableGroup.context.ts","webpack://React-Selectable-Fast/./src/Selectbox.tsx","webpack://React-Selectable-Fast/./src/SelectableGroup.tsx","webpack://React-Selectable-Fast/./src/CreateSelectable.tsx","webpack://React-Selectable-Fast/./src/SelectAll.tsx","webpack://React-Selectable-Fast/./src/DeselectAll.tsx"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"React-Selectable-Fast\"] = factory(require(\"react\"));\n\telse\n\t\troot[\"React-Selectable-Fast\"] = factory(root[\"React\"]);\n})(self, (__WEBPACK_EXTERNAL_MODULE__787__) => {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__787__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export const noop = () => {}\nexport type Maybe<T> = T | null\n\nexport * from './castTouchToMouseEvent'\nexport * from './detectMouseButton'\nexport * from './doObjectsCollide'\nexport * from './getBoundsForNode'\nexport * from './nodeInRoot'\n","export type TGetBoundsForNodeArgs = {\n  scrollTop: number\n  scrollLeft: number\n}\n\nexport type TComputedBounds = {\n  top: number\n  left: number\n  width: number\n  height: number\n  offsetWidth: number\n  offsetHeight: number\n}\n\nexport function getDocumentScroll() {\n  const documentScrollTop = Math.max(\n    window.pageYOffset,\n    document.documentElement.scrollTop,\n    document.body.scrollTop\n  )\n\n  const documentScrollLeft = Math.max(\n    window.pageXOffset,\n    document.documentElement.scrollLeft,\n    document.body.scrollLeft\n  )\n\n  return { documentScrollTop, documentScrollLeft }\n}\n\n/**\n * Given a node, get everything needed to calculate its boundaries\n */\nexport function getBoundsForNode(\n  node: HTMLElement,\n  containerScroll: TGetBoundsForNodeArgs = { scrollTop: 0, scrollLeft: 0 }\n): TComputedBounds[] {\n  const { scrollTop, scrollLeft } = containerScroll\n\n  return Array.from(node.getClientRects()).map(rect => ({\n    top: rect.top + scrollTop,\n    left: rect.left + scrollLeft,\n    offsetWidth: node.offsetWidth,\n    offsetHeight: node.offsetHeight,\n    width: rect.width,\n    height: rect.height,\n  }))\n}\n","import { MouseEvent } from 'react'\n\nconst propertiesToNormalize = ['pageX', 'pageY', 'clientX', 'clientY']\n\nfunction patchEventProperties(evt: any, touchKey: string) {\n  propertiesToNormalize.forEach(key => {\n    if (typeof evt[key] === 'undefined') {\n      evt[key] = evt[touchKey][0][key]\n    }\n  })\n}\n\n/**\n * Used to return event object with desktop (non-touch) format of event\n * coordinates, regardless of whether the action is from mobile or desktop.\n */\nexport function castTouchToMouseEvent(evt: any): MouseEvent<HTMLElement> {\n  if (evt.type.includes('mouse')) {\n    return evt\n  }\n\n  try {\n    if (evt.type === 'touchstart') {\n      patchEventProperties(evt, 'targetTouches')\n    } else if (evt.type === 'touchmove') {\n      patchEventProperties(evt, 'changedTouches')\n    }\n  } catch (err) {\n    console.error(err.message)\n  }\n\n  return evt as MouseEvent<HTMLElement>\n}\n","import { MouseEvent } from 'react'\n\ntype TDetectMouseButtonOptions = {\n  allowAltClick?: boolean\n  allowCtrlClick?: boolean\n  allowMetaClick?: boolean\n  allowShiftClick?: boolean\n}\n\n/**\n * @buttonNumber\n * 1: Left button\n * 2: Middle/Right button\n * 3: Right/Back button\n */\nexport function detectMouseButton(\n  evt: MouseEvent<HTMLElement>,\n  buttonNumber = 1,\n  options: TDetectMouseButtonOptions = {}\n) {\n  if (\n    (evt.metaKey && !options.allowMetaClick) ||\n    (evt.ctrlKey && !options.allowCtrlClick) ||\n    (evt.altKey && !options.allowAltClick) ||\n    (evt.shiftKey && !options.allowShiftClick)\n  ) {\n    return false\n  }\n\n  if ('buttons' in evt) {\n    return evt.buttons === buttonNumber\n  }\n\n  if ('which' in evt) {\n    return (evt as KeyboardEvent).which === buttonNumber\n  }\n\n  return (evt as MouseEvent).button === buttonNumber - 1\n}\n","export function isNodeInRoot(node: HTMLElement, root: HTMLElement) {\n  while (node) {\n    if (node === root) {\n      return true\n    }\n\n    node = node.parentNode as any\n  }\n\n  return false\n}\n","import { TComputedBounds } from './getBoundsForNode'\n\ntype TAreBoundsCollideOptions = {\n  tolerance?: number\n  useOffsetSize?: boolean\n}\n\n/**\n * Given offsets, widths, and heights of two objects, determine if they collide (overlap).\n */\nconst areBoundsCollide = (\n  a: TComputedBounds,\n  b: TComputedBounds,\n  { tolerance = 0, useOffsetSize = false }: TAreBoundsCollideOptions\n) => {\n  const aHeight = useOffsetSize ? a.offsetHeight : a.height\n  const bHeight = useOffsetSize ? b.offsetHeight : b.height\n\n  const aWidth = useOffsetSize ? a.offsetWidth : a.width\n  const bWidth = useOffsetSize ? b.offsetWidth : b.width\n\n  return !(\n    a.top + aHeight - tolerance < b.top ||\n    // 'a' top doesn't touch 'b' bottom\n    a.top + tolerance > b.top + bHeight ||\n    // 'a' right doesn't touch 'b' left\n    a.left + aWidth - tolerance < b.left ||\n    // 'a' left doesn't touch 'b' right\n    a.left + tolerance > b.left + bWidth\n  )\n}\n\nfunction toArray(value: any) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  return [value]\n}\n\n/**\n * Given two objects containing \"top\", \"left\", \"offsetWidth\" and \"offsetHeight\"\n * properties, determine if they collide.\n */\nexport function doObjectsCollide(\n  a: TComputedBounds | TComputedBounds[],\n  b: TComputedBounds | TComputedBounds[],\n  tolerance = 0,\n  delta = 1\n) {\n  const aBounds = toArray(a)\n  const bBounds = toArray(b)\n\n  for (let i = 0; i < aBounds.length; i++) {\n    for (let j = 0; j < bBounds.length; j++) {\n      return areBoundsCollide(aBounds[i], bBounds[j], { tolerance, useOffsetSize: delta === 1 })\n    }\n  }\n}\n","import React from 'react'\n\nimport { TSelectableGroupContext, TSelectableItem } from './Selectable.types'\nimport { noop } from './utils'\n\nexport const SelectableGroupContext = React.createContext<TSelectableGroupContext>({\n  selectable: {\n    register(_: TSelectableItem) {},\n    unregister(_: TSelectableItem) {},\n    selectAll: noop,\n    clearSelection: noop,\n    getScrolledContainer: () => null,\n  },\n})\n","import React, { useState, useEffect, CSSProperties } from 'react'\n\nexport type TSetSelectboxState = React.Dispatch<React.SetStateAction<TSelectboxState>>\n\nexport type TSelectboxProps = {\n  fixedPosition: boolean\n  className: string\n  getSetState(setState: TSetSelectboxState): void\n}\n\nexport type TSelectboxState = {\n  y: number\n  x: number\n  width: number\n  height: number\n}\n\nconst initialState: TSelectboxState = {\n  y: 0,\n  x: 0,\n  width: 0,\n  height: 0,\n}\n\nexport function Selectbox(props: TSelectboxProps) {\n  const { fixedPosition, getSetState, className } = props\n  const [state, setState] = useState(initialState)\n\n  useEffect(() => {\n    getSetState(setState)\n  }, [])\n\n  const boxStyle: CSSProperties = {\n    left: state.x,\n    top: state.y,\n    width: state.width,\n    height: state.height,\n    zIndex: 9000,\n    position: fixedPosition ? 'fixed' : 'absolute',\n    cursor: 'default',\n    willChange: 'transform',\n    transform: 'translateZ(0)',\n  }\n\n  return <div className={className} style={boxStyle} />\n}\n\nSelectbox.defaultProps = {\n  className: 'selectable-selectbox',\n}\n","import React, { Component, MouseEvent, ComponentType, CSSProperties, PropsWithChildren } from 'react'\r\n\r\nimport {\r\n  castTouchToMouseEvent,\r\n  detectMouseButton,\r\n  doObjectsCollide,\r\n  getBoundsForNode,\r\n  isNodeInRoot,\r\n  noop,\r\n  Maybe,\r\n  TComputedBounds,\r\n  getDocumentScroll\r\n} from './utils'\r\nimport { TSelectableItem } from './Selectable.types'\r\nimport { SelectableGroupContext } from './SelectableGroup.context'\r\nimport { Selectbox, TSetSelectboxState } from './Selectbox'\r\n\r\ntype TSelectItemsOptions = {\r\n  isFromClick?: boolean\r\n}\r\n\r\ntype TMouseDownData = {\r\n  selectboxY: number\r\n  selectboxX: number\r\n  target: HTMLElement | null\r\n}\r\n\r\ntype TProcessItemOptions = TSelectItemsOptions & {\r\n  item: TSelectableItem\r\n  tolerance: number\r\n  selectboxBounds: TComputedBounds\r\n  enableDeselect: boolean\r\n  mixedDeselect: boolean\r\n}\r\n\r\nexport type TSelectableGroupProps = PropsWithChildren<{\r\n  selectingWithoutMouseMove?: boolean\r\n  globalMouse?: boolean\r\n  ignoreList?: string[]\r\n  scrollSpeed?: number\r\n  minimumSpeedFactor?: number\r\n  allowClickWithoutSelected?: boolean\r\n  className?: string\r\n  clickClassName?: string\r\n  selectboxClassName?: string\r\n  style?: CSSProperties\r\n  selectionModeClass?: string\r\n  // Event that will fire when items are selected. Passes an array of keys.\r\n  onSelectionFinish?: Function\r\n  onSelectionClear?: Function\r\n  onSelectedItemUnmount?: Function\r\n  enableDeselect?: boolean\r\n  mixedDeselect?: boolean\r\n  deselectOnEsc?: boolean\r\n  resetOnStart?: boolean\r\n  disabled?: boolean\r\n  delta?: number\r\n  allowAltClick?: boolean\r\n  allowCtrlClick?: boolean\r\n  allowMetaClick?: boolean\r\n  allowShiftClick?: boolean\r\n  selectOnClick?: boolean\r\n  // Scroll container selector\r\n  scrollContainer?: string\r\n\r\n  /**\r\n   * Event that will fire rapidly during selection (while the selector is\r\n   * being dragged). Passes an array of keys.\r\n   */\r\n  duringSelection?: Function\r\n\r\n  // The component that will represent the Selectable DOM node\r\n  component?: ComponentType\r\n\r\n  /**\r\n   * Amount of forgiveness an item will offer to the selectbox before registering\r\n   * a selection, i.e. if only 1px of the item is in the selection, it shouldn't be\r\n   * included.\r\n   */\r\n  tolerance?: number\r\n\r\n  /**\r\n   * In some cases, it the bounding box may need fixed positioning, if your layout\r\n   * is relying on fixed positioned elements, for instance.\r\n   * @type boolean\r\n   */\r\n  fixedPosition?: boolean\r\n}>\r\n\r\nexport class SelectableGroup extends Component<TSelectableGroupProps> {\r\n  static defaultProps = {\r\n    clickClassName: '',\r\n    tolerance: 0,\r\n    globalMouse: false,\r\n    ignoreList: [],\r\n    scrollSpeed: 0.25,\r\n    minimumSpeedFactor: 60,\r\n    duringSelection: noop,\r\n    onSelectionFinish: noop,\r\n    onSelectionClear: noop,\r\n    onSelectedItemUnmount: noop,\r\n    allowClickWithoutSelected: true,\r\n    selectionModeClass: 'in-selection-mode',\r\n    resetOnStart: false,\r\n    disabled: false,\r\n    deselectOnEsc: true,\r\n    fixedPosition: false,\r\n    delta: 1,\r\n    allowAltClick: false,\r\n    allowCtrlClick: false,\r\n    allowMetaClick: false,\r\n    allowShiftClick: false,\r\n    selectOnClick: true\r\n  }\r\n\r\n  state = { selectionMode: false }\r\n\r\n  mouseDownStarted = false\r\n\r\n  mouseMoveStarted = false\r\n\r\n  mouseMoved = false\r\n\r\n  mouseUpStarted = false\r\n\r\n  selectionStarted = false\r\n\r\n  deselectionStarted = false\r\n\r\n  clickedItem?: TSelectableItem\r\n\r\n  mouseDownData: TMouseDownData = {\r\n    selectboxY: 0,\r\n    selectboxX: 0,\r\n    target: null\r\n  }\r\n\r\n  registry = new Set<TSelectableItem>()\r\n\r\n  selectedItems = new Set<TSelectableItem>()\r\n\r\n  selectingItems = new Set<TSelectableItem>()\r\n\r\n  ignoreCheckCache = new Map<HTMLElement, boolean>()\r\n\r\n  ignoreList = this.props.ignoreList!.concat(['.selectable-select-all', '.selectable-deselect-all'])\r\n\r\n  ignoreListNodes: HTMLElement[] = []\r\n\r\n  setSelectboxState: Maybe<TSetSelectboxState> = null\r\n\r\n  selectableGroup: Maybe<HTMLElement> = null\r\n\r\n  scrollContainer: Maybe<HTMLElement> = null\r\n\r\n  maxScrollTop = 0\r\n\r\n  maxScrollLeft = 0\r\n\r\n  scrollBounds: Maybe<DOMRect | ClientRect> = null\r\n\r\n  containerScroll = {\r\n    scrollTop: 0,\r\n    scrollLeft: 0\r\n  }\r\n\r\n  documentScroll = {\r\n    scrollTop: 0,\r\n    scrollLeft: 0\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.scrollContainer) {\r\n      this.scrollContainer = document.querySelector(this.props.scrollContainer)\r\n    } else {\r\n      this.scrollContainer = this.selectableGroup\r\n    }\r\n\r\n    this.scrollContainer!.addEventListener('scroll', this.saveContainerScroll)\r\n    document.addEventListener('scroll', this.saveDocumentScroll)\r\n\r\n    this.selectableGroup!.addEventListener('mousedown', this.mouseDown)\r\n    this.selectableGroup!.addEventListener('touchstart', this.mouseDown)\r\n\r\n    if (this.props.deselectOnEsc) {\r\n      document.addEventListener('keydown', this.keyListener)\r\n      document.addEventListener('keyup', this.keyListener)\r\n    }\r\n\r\n    this.removeIgnoredItemsFromRegistry()\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.scrollContainer!.removeEventListener('scroll', this.saveContainerScroll)\r\n    document.removeEventListener('scroll', this.saveDocumentScroll)\r\n\r\n    this.selectableGroup!.removeEventListener('mousedown', this.mouseDown)\r\n    this.selectableGroup!.removeEventListener('touchstart', this.mouseDown)\r\n\r\n    if (this.props.deselectOnEsc) {\r\n      document.removeEventListener('keydown', this.keyListener)\r\n      document.removeEventListener('keyup', this.keyListener)\r\n    }\r\n\r\n    this.removeTempEventListeners()\r\n\r\n    // Prevent onSelectedItemUnmount calls\r\n    this.selectedItems.clear()\r\n    this.selectingItems.clear()\r\n  }\r\n\r\n  saveContainerScroll = () => {\r\n    const { scrollTop, scrollLeft } = this.scrollContainer!\r\n\r\n    this.containerScroll = {\r\n      scrollTop,\r\n      scrollLeft\r\n    }\r\n  }\r\n\r\n  saveDocumentScroll = () => {\r\n    const { documentScrollLeft, documentScrollTop } = getDocumentScroll()\r\n\r\n    this.documentScroll = {\r\n      scrollTop: documentScrollTop,\r\n      scrollLeft: documentScrollLeft\r\n    }\r\n  }\r\n\r\n  get containerDocumentScroll() {\r\n    return {\r\n      scrollTop: this.containerScroll.scrollTop + this.documentScroll.scrollTop,\r\n      scrollLeft: this.containerScroll.scrollLeft + this.documentScroll.scrollLeft\r\n    }\r\n  }\r\n\r\n  removeTempEventListeners() {\r\n    document.removeEventListener('mousemove', this.updateSelectBox)\r\n    // document.removeEventListener('touchmove', this.updateSelectBox)\r\n    document.removeEventListener('mouseup', this.mouseUp)\r\n    document.removeEventListener('touchend', this.mouseUp)\r\n  }\r\n\r\n  updateRootBounds() {\r\n    this.scrollBounds = this.scrollContainer!.getBoundingClientRect()\r\n    this.maxScrollTop = this.scrollContainer!.scrollHeight - this.scrollContainer!.clientHeight\r\n    this.maxScrollLeft = this.scrollContainer!.scrollWidth - this.scrollContainer!.clientWidth\r\n  }\r\n\r\n  updateRegistry = () => {\r\n    for (const selectableItem of this.registry.values()) {\r\n      selectableItem.updateBounds(this.containerDocumentScroll)\r\n    }\r\n  }\r\n\r\n  registerSelectable = (selectableItem: TSelectableItem) => {\r\n    this.registry.add(selectableItem)\r\n\r\n    if (selectableItem.state.isSelected) {\r\n      this.selectedItems.add(selectableItem)\r\n    }\r\n  }\r\n\r\n  unregisterSelectable = (selectableItem: TSelectableItem) => {\r\n    this.registry.delete(selectableItem)\r\n\r\n    const isRemoved =\r\n      this.selectedItems.has(selectableItem) || this.selectingItems.has(selectableItem)\r\n\r\n    this.selectedItems.delete(selectableItem)\r\n    this.selectingItems.delete(selectableItem)\r\n\r\n    if (isRemoved) {\r\n      // Notify third-party that component did unmount and handled item probably should be deleted\r\n      this.props.onSelectedItemUnmount!(selectableItem, [...this.selectedItems])\r\n    }\r\n  }\r\n\r\n  toggleSelectionMode() {\r\n    const {\r\n      selectedItems,\r\n      state: { selectionMode }\r\n    } = this\r\n\r\n    if (selectedItems.size && !selectionMode) {\r\n      this.setState({ selectionMode: true })\r\n    }\r\n    if (!selectedItems.size && selectionMode) {\r\n      this.setState({ selectionMode: false })\r\n    }\r\n  }\r\n\r\n  private updateContainerScroll = (evt: MouseEvent<HTMLElement>) => {\r\n    const { scrollTop, scrollLeft } = this.containerScroll\r\n\r\n    this.checkScrollTop(evt.clientY, scrollTop)\r\n    this.checkScrollBottom(evt.clientY, scrollTop)\r\n    this.checkScrollLeft(evt.clientX, scrollLeft)\r\n    this.checkScrollRight(evt.clientX, scrollLeft)\r\n  }\r\n\r\n  getScrollStep = (offset: number) => {\r\n    const { minimumSpeedFactor, scrollSpeed } = this.props\r\n\r\n    return Math.max(offset, minimumSpeedFactor!) * scrollSpeed!\r\n  }\r\n\r\n  checkScrollTop = (clientY: number, currentTop: number) => {\r\n    const offset = this.scrollBounds!.top - clientY\r\n\r\n    if (offset > 0 || clientY < 0) {\r\n      this.scrollContainer!.scrollTop = currentTop - this.getScrollStep(offset)\r\n    }\r\n  }\r\n\r\n  checkScrollBottom = (clientY: number, currentTop: number) => {\r\n    const offset = clientY - this.scrollBounds!.bottom\r\n\r\n    if (offset > 0 || clientY > window.innerHeight) {\r\n      const newTop = currentTop + this.getScrollStep(offset)\r\n      this.scrollContainer!.scrollTop = Math.min(newTop, this.maxScrollTop)\r\n    }\r\n  }\r\n\r\n  checkScrollLeft = (clientX: number, currentLeft: number) => {\r\n    const offset = this.scrollBounds!.left - clientX\r\n\r\n    if (offset > 0 || clientX < 0) {\r\n      const newLeft = currentLeft - this.getScrollStep(offset)\r\n      this.scrollContainer!.scrollLeft = newLeft\r\n    }\r\n  }\r\n\r\n  checkScrollRight = (clientX: number, currentLeft: number) => {\r\n    const offset = clientX - this.scrollBounds!.right\r\n\r\n    if (offset > 0 || clientX > window.innerWidth) {\r\n      const newLeft = currentLeft + this.getScrollStep(offset)\r\n      this.scrollContainer!.scrollLeft = Math.min(newLeft, this.maxScrollLeft)\r\n    }\r\n  }\r\n\r\n  updateSelectBox = (event: Event) => {\r\n    const evt = castTouchToMouseEvent(event)\r\n    this.updateContainerScroll(evt)\r\n\r\n    if (this.mouseMoveStarted) {\r\n      return\r\n    }\r\n    this.mouseMoveStarted = true\r\n    this.mouseMoved = true\r\n\r\n    const { mouseDownData } = this\r\n    const { clientX, clientY } = evt\r\n\r\n    const pointY = clientY - this.scrollBounds!.top + this.containerScroll.scrollTop\r\n    const selectboxY = Math.min(pointY, mouseDownData.selectboxY)\r\n\r\n    const pointX = clientX - this.scrollBounds!.left + this.containerScroll.scrollLeft\r\n    const selectboxX = Math.min(pointX, mouseDownData.selectboxX)\r\n\r\n    const selectboxState = {\r\n      x: selectboxX,\r\n      y: selectboxY,\r\n      width: Math.abs(pointX - mouseDownData.selectboxX),\r\n      height: Math.abs(pointY - mouseDownData.selectboxY)\r\n    }\r\n\r\n    this.setSelectboxState!(selectboxState)\r\n\r\n    const selectboxBounds = {\r\n      top: selectboxState.y + this.scrollBounds!.top + this.documentScroll.scrollTop,\r\n      left: selectboxState.x + this.scrollBounds!.left + this.documentScroll.scrollLeft,\r\n      width: selectboxState.width,\r\n      height: selectboxState.height,\r\n      offsetWidth: selectboxState.width || 1,\r\n      offsetHeight: selectboxState.height || 1\r\n    }\r\n\r\n    this.selectItems(selectboxBounds)\r\n    this.props.duringSelection!([...this.selectingItems])\r\n    this.mouseMoveStarted = false\r\n  }\r\n\r\n  selectItems = (selectboxBounds: TComputedBounds, options: TSelectItemsOptions = {}) => {\r\n    const { tolerance, enableDeselect, mixedDeselect } = this.props\r\n\r\n    for (const item of this.registry.values()) {\r\n      this.processItem({\r\n        item,\r\n        selectboxBounds,\r\n        tolerance: tolerance!,\r\n        mixedDeselect: mixedDeselect!,\r\n        enableDeselect: enableDeselect!,\r\n        isFromClick: options && options.isFromClick\r\n      })\r\n    }\r\n  }\r\n\r\n  processItem(options: TProcessItemOptions) {\r\n    const { item, tolerance, selectboxBounds, enableDeselect, mixedDeselect, isFromClick } = options\r\n\r\n    const { delta } = this.props\r\n    const isCollided = doObjectsCollide(selectboxBounds, item.bounds!, tolerance, delta)\r\n    const { isSelecting, isSelected } = item.state\r\n\r\n    if (isFromClick && isCollided) {\r\n      if (isSelected) {\r\n        this.selectedItems.delete(item)\r\n      } else {\r\n        this.selectedItems.add(item)\r\n      }\r\n\r\n      item.setState({ isSelected: !isSelected })\r\n      this.clickedItem = item\r\n\r\n      return item\r\n    }\r\n\r\n    if (!isFromClick && isCollided) {\r\n      if (isSelected && enableDeselect && (!this.selectionStarted || mixedDeselect)) {\r\n        item.setState({ isSelected: false })\r\n        item.deselected = true\r\n\r\n        this.deselectionStarted = true\r\n\r\n        return this.selectedItems.delete(item)\r\n      }\r\n\r\n      const canSelect = mixedDeselect ? !item.deselected : !this.deselectionStarted\r\n\r\n      if (!isSelecting && !isSelected && canSelect) {\r\n        item.setState({ isSelecting: true })\r\n\r\n        this.selectionStarted = true\r\n        this.selectingItems.add(item)\r\n\r\n        return { updateSelecting: true }\r\n      }\r\n    }\r\n\r\n    if (!isFromClick && !isCollided && isSelecting) {\r\n      if (this.selectingItems.has(item)) {\r\n        item.setState({ isSelecting: false })\r\n\r\n        this.selectingItems.delete(item)\r\n\r\n        return { updateSelecting: true }\r\n      }\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  clearSelection = () => {\r\n    for (const item of this.selectedItems.values()) {\r\n      item.setState({ isSelected: false })\r\n      this.selectedItems.delete(item)\r\n    }\r\n\r\n    this.setState({ selectionMode: false })\r\n    this.props.onSelectionFinish!([...this.selectedItems], this.selectableGroup)\r\n    this.props.onSelectionClear!()\r\n  }\r\n\r\n  selectAll = () => {\r\n    this.removeIgnoredItemsFromRegistry()\r\n\r\n    for (const item of this.registry.values()) {\r\n      if (!item.state.isSelected) {\r\n        item.setState({ isSelected: true })\r\n        this.selectedItems.add(item)\r\n      }\r\n    }\r\n\r\n    this.setState({ selectionMode: true })\r\n    this.props.onSelectionFinish!([...this.selectedItems], this.selectableGroup)\r\n  }\r\n\r\n  isInIgnoreList(target: HTMLElement | null) {\r\n    if (!target) {\r\n      return\r\n    }\r\n\r\n    if (this.ignoreCheckCache.get(target) !== undefined) {\r\n      return this.ignoreCheckCache.get(target)\r\n    }\r\n\r\n    const shouldBeIgnored = this.ignoreListNodes.some(\r\n      ignoredNode => target === ignoredNode || ignoredNode.contains(target)\r\n    )\r\n\r\n    this.ignoreCheckCache.set(target, shouldBeIgnored)\r\n\r\n    return shouldBeIgnored\r\n  }\r\n\r\n  removeIgnoredItemsFromRegistry() {\r\n    this.ignoreListNodes = Array.from(document.querySelectorAll(this.ignoreList.join(', ')))\r\n\r\n    this.registry = new Set([...this.registry].filter(item => !this.isInIgnoreList(item.node)))\r\n    this.selectedItems = new Set(\r\n      [...this.selectedItems].filter(item => !this.isInIgnoreList(item.node))\r\n    )\r\n  }\r\n\r\n  mouseDown = (e: Event) => {\r\n    const isNotLeftButtonClick =\r\n      !e.type.includes('touch') &&\r\n      !detectMouseButton(e as any, 1, {\r\n        allowAltClick: this.props.allowAltClick,\r\n        allowCtrlClick: this.props.allowCtrlClick,\r\n        allowMetaClick: this.props.allowMetaClick,\r\n        allowShiftClick: this.props.allowShiftClick\r\n      })\r\n    if (this.mouseDownStarted || this.props.disabled || isNotLeftButtonClick) {\r\n      return\r\n    }\r\n\r\n    this.removeIgnoredItemsFromRegistry()\r\n\r\n    if (this.isInIgnoreList(e.target as HTMLElement)) {\r\n      this.mouseDownStarted = false\r\n\r\n      return\r\n    }\r\n\r\n    if (this.props.resetOnStart) {\r\n      this.clearSelection()\r\n    }\r\n    this.mouseDownStarted = true\r\n    this.mouseUpStarted = false\r\n    const evt = castTouchToMouseEvent(e)\r\n\r\n    if (!this.props.globalMouse && !isNodeInRoot(evt.target as any, this.selectableGroup!)) {\r\n      const [bounds] = getBoundsForNode(this.selectableGroup!, this.documentScroll)\r\n      const collides = doObjectsCollide(\r\n        {\r\n          top: bounds.top,\r\n          left: bounds.left,\r\n          width: 0,\r\n          height: 0,\r\n          offsetHeight: bounds.offsetHeight,\r\n          offsetWidth: bounds.offsetWidth\r\n        },\r\n        {\r\n          top: evt.pageY,\r\n          left: evt.pageX,\r\n          width: 0,\r\n          height: 0,\r\n          offsetWidth: 0,\r\n          offsetHeight: 0\r\n        }\r\n      )\r\n\r\n      if (!collides) {\r\n        return\r\n      }\r\n    }\r\n\r\n    this.updateRootBounds()\r\n    this.updateRegistry()\r\n\r\n    this.mouseDownData = {\r\n      target: evt.target as HTMLElement,\r\n      selectboxY: evt.clientY - this.scrollBounds!.top + this.containerScroll.scrollTop,\r\n      selectboxX: evt.clientX - this.scrollBounds!.left + this.containerScroll.scrollLeft\r\n    }\r\n\r\n    if( this.props.selectingWithoutMouseMove ) {\r\n      this.updateSelectBox( evt );\r\n    }\r\n\r\n    evt.preventDefault()\r\n\r\n    document.addEventListener('mousemove', this.updateSelectBox)\r\n    // document.addEventListener('touchmove', this.updateSelectBox)\r\n    document.addEventListener('mouseup', this.mouseUp)\r\n    document.addEventListener('touchend', this.mouseUp)\r\n  }\r\n\r\n  preventEvent(target: HTMLElement, type: string) {\r\n    const preventHandler = (evt: Event) => {\r\n      target.removeEventListener(type, preventHandler, true)\r\n      evt.preventDefault()\r\n      evt.stopPropagation()\r\n    }\r\n    target.addEventListener(type, preventHandler, true)\r\n  }\r\n\r\n  private mouseUp = (event: Event) => {\r\n    if (this.mouseUpStarted) {\r\n      return\r\n    }\r\n\r\n    this.mouseUpStarted = true\r\n    this.mouseDownStarted = false\r\n    this.removeTempEventListeners()\r\n\r\n    if (!this.mouseDownData) {\r\n      return\r\n    }\r\n\r\n    const evt: any = castTouchToMouseEvent(event)\r\n    const { pageX, pageY } = evt\r\n\r\n    if (!this.mouseMoved && isNodeInRoot(evt.target as HTMLElement, this.selectableGroup!)) {\r\n      this.handleClick(evt, pageY, pageX)\r\n    } else {\r\n      for (const item of this.selectingItems.values()) {\r\n        item.setState({ isSelected: true, isSelecting: false })\r\n      }\r\n      this.selectedItems = new Set([...this.selectedItems, ...this.selectingItems])\r\n      this.selectingItems.clear()\r\n\r\n      if (evt.which === 1 && this.mouseDownData.target === evt.target) {\r\n        this.preventEvent(evt.target, 'click')\r\n      }\r\n\r\n      this.setSelectboxState!({\r\n        x: 0,\r\n        y: 0,\r\n        width: 0,\r\n        height: 0\r\n      })\r\n      this.props.onSelectionFinish!([...this.selectedItems], this.selectableGroup)\r\n    }\r\n\r\n    this.toggleSelectionMode()\r\n    this.cleanUp()\r\n    this.mouseMoved = false\r\n  }\r\n\r\n  keyListener = (evt: KeyboardEvent) => {\r\n    if (evt.keyCode === 27) {\r\n      // escape\r\n      this.clearSelection()\r\n    }\r\n  }\r\n\r\n  cleanUp() {\r\n    this.deselectionStarted = false\r\n    this.selectionStarted = false\r\n\r\n    if (this.props.mixedDeselect) {\r\n      for (const item of this.registry.values()) {\r\n        item.deselected = false\r\n      }\r\n    }\r\n  }\r\n\r\n  getGroupRef = (ref: HTMLElement | null) => {\r\n    this.selectableGroup = ref\r\n  }\r\n\r\n  getSelectboxSetState = (setState: TSetSelectboxState) => {\r\n    this.setSelectboxState = setState\r\n  }\r\n\r\n  // eslint-disable-next-line react/sort-comp\r\n  defaultContainerStyle: CSSProperties = {\r\n    position: 'relative'\r\n  }\r\n\r\n  contextValue = {\r\n    selectable: {\r\n      register: this.registerSelectable,\r\n      unregister: this.unregisterSelectable,\r\n      selectAll: this.selectAll,\r\n      clearSelection: this.clearSelection,\r\n      getScrolledContainer: () => this.scrollContainer\r\n    }\r\n  }\r\n\r\n  handleClick(evt: any, top: number, left: number) {\r\n    if (!this.props.selectOnClick) {\r\n      return\r\n    }\r\n\r\n    const { clickClassName, allowClickWithoutSelected, onSelectionFinish } = this.props\r\n    const classNames = (evt.target as HTMLElement).classList || []\r\n    const isMouseUpOnClickElement = Array.from(classNames).includes(clickClassName!)\r\n\r\n    if (\r\n      allowClickWithoutSelected ||\r\n      this.selectedItems.size ||\r\n      isMouseUpOnClickElement ||\r\n      evt.ctrlKey\r\n    ) {\r\n      this.selectItems(\r\n        {\r\n          top,\r\n          left,\r\n          width: 0,\r\n          height: 0,\r\n          offsetWidth: 0,\r\n          offsetHeight: 0\r\n        },\r\n        { isFromClick: true }\r\n      )\r\n\r\n      onSelectionFinish!([...this.selectedItems], this.selectableGroup, this.clickedItem)\r\n\r\n      if (evt.which === 1) {\r\n        this.preventEvent(evt.target, 'click')\r\n      }\r\n      if (evt.which === 2 || evt.which === 3) {\r\n        this.preventEvent(evt.target, 'contextmenu')\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { selectionMode } = this.state\r\n    const {\r\n      component: GroupComponent = 'div',\r\n      className,\r\n      style,\r\n      selectionModeClass,\r\n      fixedPosition,\r\n      selectboxClassName,\r\n      children\r\n    } = this.props\r\n\r\n    return (\r\n      <SelectableGroupContext.Provider value={this.contextValue}>\r\n        <GroupComponent\r\n          ref={this.getGroupRef}\r\n          style={{ ...this.defaultContainerStyle, ...style }}\r\n          className={`${className} ${selectionMode ? selectionModeClass : ''}`}\r\n        >\r\n          {children}\r\n          <Selectbox\r\n            getSetState={this.getSelectboxSetState}\r\n            className={selectboxClassName}\r\n            fixedPosition={fixedPosition!}\r\n          />\r\n        </GroupComponent>\r\n      </SelectableGroupContext.Provider>\r\n    )\r\n  }\r\n}\r\n","import React, { Component, ComponentType } from 'react'\n\nimport { getBoundsForNode, TComputedBounds, TGetBoundsForNodeArgs } from './utils'\nimport { TSelectableItemState, TSelectableItemProps } from './Selectable.types'\nimport { SelectableGroupContext } from './SelectableGroup.context'\n\ntype TAddedProps = Partial<Pick<TSelectableItemProps, 'isSelected'>>\n\nexport const createSelectable = <T extends any>(\n  WrappedComponent: ComponentType<TSelectableItemProps & T>\n): ComponentType<T & TAddedProps> =>\n  class SelectableItem extends Component<T & TAddedProps, TSelectableItemState> {\n    static contextType = SelectableGroupContext\n\n    static defaultProps = {\n      isSelected: false,\n    }\n\n    state = {\n      isSelected: this.props.isSelected,\n      isSelecting: false,\n    }\n\n    node: HTMLElement | null = null\n\n    bounds: TComputedBounds[] | null = null\n\n    componentDidMount() {\n      this.updateBounds()\n      this.context.selectable.register(this)\n    }\n\n    componentWillUnmount() {\n      this.context.selectable.unregister(this)\n    }\n\n    updateBounds = (containerScroll?: TGetBoundsForNodeArgs) => {\n      this.bounds = getBoundsForNode(this.node!, containerScroll)\n    }\n\n    getSelectableRef = (ref: HTMLElement | null) => {\n      this.node = ref\n    }\n\n    render() {\n      return (\n        <WrappedComponent {...this.props} {...this.state} selectableRef={this.getSelectableRef} />\n      )\n    }\n  }\n","import React, { Component, ReactNode, FunctionComponent } from 'react'\n\nimport { SelectableGroupContext } from './SelectableGroup.context'\n\ntype TSelectAllProps = {\n  children: ReactNode\n  component?: string | FunctionComponent\n  className?: string\n  [key: string]: any\n}\n\nexport class SelectAll extends Component<TSelectAllProps> {\n  static contextType = SelectableGroupContext\n\n  root: HTMLDivElement | null = null\n\n  componentDidMount() {\n    this.root!.addEventListener('mousedown', (evt: Event) => evt.stopPropagation())\n  }\n\n  getRootRef = (ref: HTMLDivElement | null) => {\n    this.root = ref\n  }\n\n  render() {\n    const { component = 'div', children, className = '', ...rest } = this.props\n    const ButtonComponent = component as FunctionComponent<any>\n\n    return (\n      <ButtonComponent\n        ref={this.getRootRef}\n        className={`selectable-select-all ${className}`}\n        onClick={this.context.selectable.selectAll}\n        {...rest}\n      >\n        {children}\n      </ButtonComponent>\n    )\n  }\n}\n","import React, { Component, FunctionComponent, ReactNode } from 'react'\n\nimport { SelectableGroupContext } from './SelectableGroup.context'\n\ntype TDeselectAllProps = {\n  children: ReactNode\n  component?: string | FunctionComponent\n  className?: string\n  [key: string]: any\n}\n\nexport class DeselectAll extends Component<TDeselectAllProps> {\n  static contextType = SelectableGroupContext\n\n  root: HTMLDivElement | null = null\n\n  componentDidMount() {\n    this.root!.addEventListener('mousedown', (evt: Event) => evt.stopPropagation())\n  }\n\n  getRootRef = (ref: HTMLDivElement | null) => {\n    this.root = ref\n  }\n\n  render() {\n    const { component = 'div', children, className, ...rest } = this.props\n    const ButtonComponent = component as FunctionComponent<any>\n\n    return (\n      <ButtonComponent\n        ref={this.getRootRef}\n        className={`selectable-select-all ${className}`}\n        onClick={this.context.selectable.clearSelection}\n        {...rest}\n      >\n        {children}\n      </ButtonComponent>\n    )\n  }\n}\n"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__787__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","noop","getDocumentScroll","documentScrollTop","Math","max","window","pageYOffset","document","documentElement","scrollTop","body","documentScrollLeft","pageXOffset","scrollLeft","getBoundsForNode","node","containerScroll","Array","from","getClientRects","map","rect","top","left","offsetWidth","offsetHeight","width","height","propertiesToNormalize","patchEventProperties","evt","touchKey","forEach","castTouchToMouseEvent","type","includes","err","console","error","message","detectMouseButton","buttonNumber","options","metaKey","allowMetaClick","ctrlKey","allowCtrlClick","altKey","allowAltClick","shiftKey","allowShiftClick","buttons","which","button","isNodeInRoot","parentNode","areBoundsCollide","b","tolerance","useOffsetSize","aHeight","bHeight","aWidth","bWidth","toArray","isArray","doObjectsCollide","delta","aBounds","bBounds","i","length","j","SelectableGroupContext","React","selectable","register","_","unregister","selectAll","clearSelection","getScrolledContainer","initialState","y","x","Selectbox","props","fixedPosition","getSetState","className","useState","state","setState","useEffect","boxStyle","zIndex","position","cursor","willChange","transform","style","defaultProps","SelectableGroup","selectionMode","selectboxY","selectboxX","target","Set","Map","ignoreList","concat","scrollContainer","documentScroll","registry","values","updateBounds","containerDocumentScroll","selectableItem","add","isSelected","selectedItems","isRemoved","has","selectingItems","onSelectedItemUnmount","checkScrollTop","clientY","checkScrollBottom","checkScrollLeft","clientX","checkScrollRight","offset","minimumSpeedFactor","scrollSpeed","currentTop","scrollBounds","getScrollStep","bottom","innerHeight","newTop","min","maxScrollTop","currentLeft","newLeft","right","innerWidth","maxScrollLeft","event","updateContainerScroll","mouseMoveStarted","mouseMoved","mouseDownData","pointY","pointX","selectboxState","abs","setSelectboxState","selectboxBounds","selectItems","duringSelection","enableDeselect","mixedDeselect","item","processItem","isFromClick","onSelectionFinish","selectableGroup","onSelectionClear","removeIgnoredItemsFromRegistry","e","isNotLeftButtonClick","mouseDownStarted","disabled","isInIgnoreList","resetOnStart","mouseUpStarted","globalMouse","bounds","pageY","pageX","updateRootBounds","updateRegistry","selectingWithoutMouseMove","updateSelectBox","preventDefault","addEventListener","mouseUp","removeTempEventListeners","handleClick","isSelecting","clear","preventEvent","toggleSelectionMode","cleanUp","keyCode","ref","registerSelectable","unregisterSelectable","this","querySelector","saveContainerScroll","saveDocumentScroll","mouseDown","deselectOnEsc","keyListener","removeEventListener","getBoundingClientRect","scrollHeight","clientHeight","scrollWidth","clientWidth","size","isCollided","clickedItem","selectionStarted","deselected","deselectionStarted","canSelect","updateSelecting","ignoreCheckCache","shouldBeIgnored","ignoreListNodes","some","ignoredNode","contains","set","querySelectorAll","join","filter","preventHandler","stopPropagation","selectOnClick","clickClassName","allowClickWithoutSelected","classNames","classList","isMouseUpOnClickElement","component","GroupComponent","selectionModeClass","selectboxClassName","children","Provider","contextValue","getGroupRef","defaultContainerStyle","getSelectboxSetState","Component","createSelectable","WrappedComponent","context","selectableRef","getSelectableRef","SelectAll","rest","ButtonComponent","getRootRef","onClick","DeselectAll"],"sourceRoot":""}