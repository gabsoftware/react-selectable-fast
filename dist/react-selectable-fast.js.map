{"version":3,"sources":["webpack://React-Selectable-Fast/webpack/universalModuleDefinition","webpack://React-Selectable-Fast/webpack/bootstrap","webpack://React-Selectable-Fast/external {\"root\":\"React\",\"commonjs2\":\"react\",\"commonjs\":\"react\",\"amd\":\"react\"}","webpack://React-Selectable-Fast/./src/utils/castTouchToMouseEvent.ts","webpack://React-Selectable-Fast/./src/utils/detectMouseButton.ts","webpack://React-Selectable-Fast/./src/utils/getBoundsForNode.ts","webpack://React-Selectable-Fast/./src/utils/doObjectsCollide.ts","webpack://React-Selectable-Fast/./src/utils/nodeInRoot.ts","webpack://React-Selectable-Fast/./src/utils/index.ts","webpack://React-Selectable-Fast/./src/Context.ts","webpack://React-Selectable-Fast/./src/Selectbox.tsx","webpack://React-Selectable-Fast/./src/SelectableGroup.tsx","webpack://React-Selectable-Fast/./src/CreateSelectable.tsx","webpack://React-Selectable-Fast/./src/SelectAll.tsx","webpack://React-Selectable-Fast/./src/DeselectAll.tsx"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","propertiesToNormalize","patchEventProperties","evt","touchKey","forEach","castTouchToMouseEvent","type","includes","err","console","error","message","detectMouseButton","buttonNumber","options","metaKey","allowMetaClick","ctrlKey","allowCtrlClick","altKey","allowAltClick","shiftKey","allowShiftClick","buttons","which","button","getDocumentScroll","documentScrollTop","Math","max","pageYOffset","document","documentElement","scrollTop","body","documentScrollLeft","pageXOffset","scrollLeft","getBoundsForNode","node","containerScroll","Array","from","getClientRects","map","rect","top","left","offsetWidth","offsetHeight","width","height","areBoundsCollide","a","b","tolerance","useOffsetSize","aHeight","bHeight","aWidth","bWidth","toArray","isArray","doObjectsCollide","delta","aBounds","HTMLElement","bBounds","length","j","isNodeInRoot","parentNode","noop","SelectableGroupContext","React","createContext","selectable","register","_","unregister","selectAll","clearSelection","getScrolledContainer","Selectbox","y","x","isSelecting","selectbox","ref","this","props","fixedPosition","className","boxStyle","state","zIndex","position","cursor","getSelectboxRef","style","Component","SelectableGroup","selectionMode","selectboxY","selectboxX","target","Set","Map","ignoreList","concat","scrollContainer","registry","values","registerSelectable","selectableItem","add","isSelected","selectedItems","isRemoved","has","selectingItems","onSelectedItemUnmount","checkScrollTop","clientY","checkScrollBottom","checkScrollLeft","clientX","checkScrollRight","offset","minimumSpeedFactor","scrollSpeed","currentTop","scrollBounds","getScrollStep","bottom","innerHeight","newTop","min","maxScrollTop","currentLeft","newLeft","right","innerWidth","maxScrollLeft","event","updateContainerScroll","mouseMoveStarted","mouseMoved","mouseDownData","pointY","pointX","setState","abs","updateSelecting","duringSelection","selectboxNode","getRef","selectboxBounds","selectItems","enableDeselect","mixedDeselect","item","processItem","isFromClick","onSelectionFinish","onSelectionClear","updateWhiteListNodes","isInIgnoreList","e","isNotLeftButtonClick","mouseDownStarted","disabled","resetOnStart","mouseUpStarted","globalMouse","selectableGroup","offsetData","pageY","pageX","updateRootBounds","updateRegistry","preventDefault","addEventListener","updateSelectBox","mouseUp","removeTempEventListeners","handleClick","clear","preventEvent","toggleSelectionMode","cleanUp","keyCode","unregisterSelectable","querySelector","mouseDown","deselectOnEsc","keyListener","removeEventListener","getBoundingClientRect","scrollHeight","clientHeight","scrollWidth","clientWidth","size","isCollided","bounds","clickedItem","selectionStarted","deselected","deselectionStarted","canSelect","undefined","ignoreCheckCache","shouldBeIgnored","ignoreListNodes","some","ignoredNode","contains","set","querySelectorAll","join","preventHandler","stopPropagation","selectOnClick","clickClassName","allowClickWithoutSelected","classNames","classList","isMouseUpOnClickElement","component","GroupComponent","selectionModeClass","selectboxClassName","children","Provider","contextValue","getGroupRef","defaultContainerStyle","createSelectable","WrappedComponent","context","selectableRef","getSelectableRef","SelectAllButton","ButtonComponent","rest","getRootRef","onClick","DeselectAllButton"],"mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,EAAQG,QAAQ,UACR,mBAAXC,QAAyBA,OAAOC,IAC9CD,OAAO,CAAC,SAAUJ,GACQ,iBAAZC,QACdA,QAAQ,yBAA2BD,EAAQG,QAAQ,UAEnDJ,EAAK,yBAA2BC,EAAQD,EAAY,OARtD,CASGO,QAAQ,SAASC,GACpB,O,YCTE,IAAIC,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUT,QAGnC,IAAIC,EAASM,EAAiBE,GAAY,CACzCC,EAAGD,EACHE,GAAG,EACHX,QAAS,IAUV,OANAY,EAAQH,GAAUI,KAAKZ,EAAOD,QAASC,EAAQA,EAAOD,QAASQ,GAG/DP,EAAOU,GAAI,EAGJV,EAAOD,QA0Df,OArDAQ,EAAoBM,EAAIF,EAGxBJ,EAAoBO,EAAIR,EAGxBC,EAAoBQ,EAAI,SAAShB,EAASiB,EAAMC,GAC3CV,EAAoBW,EAAEnB,EAASiB,IAClCG,OAAOC,eAAerB,EAASiB,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEV,EAAoBgB,EAAI,SAASxB,GACX,oBAAXyB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAerB,EAASyB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAerB,EAAS,aAAc,CAAE2B,OAAO,KAQvDnB,EAAoBoB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQnB,EAAoBmB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFAxB,EAAoBgB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOnB,EAAoBQ,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRvB,EAAoB2B,EAAI,SAASlC,GAChC,IAAIiB,EAASjB,GAAUA,EAAO6B,WAC7B,WAAwB,OAAO7B,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAO,EAAoBQ,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRV,EAAoBW,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG7B,EAAoBgC,EAAI,GAIjBhC,EAAoBA,EAAoBiC,EAAI,G,gBClFrDxC,EAAOD,QAAUM,G,6UCEXoC,EAAwB,CAAC,QAAS,QAAS,UAAW,WAE5D,SAASC,EAAqBC,EAAUC,GACtCH,EAAsBI,SAAQ,SAAAb,QACJ,IAAbW,EAAIX,KACbW,EAAIX,GAAOW,EAAIC,GAAU,GAAGZ,OAS3B,SAASc,EAAsBH,GACpC,GAAIA,EAAII,KAAKC,SAAS,SACpB,OAAOL,EAGT,IACmB,eAAbA,EAAII,KACNL,EAAqBC,EAAK,iBACJ,cAAbA,EAAII,MACbL,EAAqBC,EAAK,kBAE5B,MAAOM,GACPC,QAAQC,MAAMF,EAAIG,SAGpB,OAAOT,EChBF,SAASU,EACdV,GAGA,IAFAW,EAEA,uDAFe,EACfC,EACA,uDADqC,GAErC,QACGZ,EAAIa,UAAYD,EAAQE,gBACxBd,EAAIe,UAAYH,EAAQI,gBACxBhB,EAAIiB,SAAWL,EAAQM,eACvBlB,EAAImB,WAAaP,EAAQQ,mBAKxB,YAAapB,EACRA,EAAIqB,UAAYV,EAGrB,UAAWX,EACLA,EAAsBsB,QAAUX,EAGlCX,EAAmBuB,SAAWZ,EAAe,GCvBhD,SAASa,IAad,MAAO,CAAEC,kBAZiBC,KAAKC,IAC7BlE,OAAOmE,YACPC,SAASC,gBAAgBC,UACzBF,SAASG,KAAKD,WASYE,mBANDP,KAAKC,IAC9BlE,OAAOyE,YACPL,SAASC,gBAAgBK,WACzBN,SAASG,KAAKG,aASX,SAASC,EACdC,GAEmB,IADnBC,EACmB,uDADsB,CAAEP,UAAW,EAAGI,WAAY,GAE7DJ,EAA0BO,EAA1BP,UAAWI,EAAeG,EAAfH,WADA,EAE+BX,IAA1CC,EAFW,EAEXA,kBAAmBQ,EAFR,EAEQA,mBAE3B,OAAOM,MAAMC,KAAKH,EAAKI,kBAAkBC,KAAI,SAAAC,GAAI,MAAK,CACpDC,IAAKD,EAAKC,IAAMnB,EAAoBM,EACpCc,KAAMF,EAAKE,KAAOZ,EAAqBE,EACvCW,YAAaT,EAAKS,YAClBC,aAAcV,EAAKU,aACnBC,MAAOL,EAAKK,MACZC,OAAQN,EAAKM,WCpCjB,IAAMC,EAAmB,SACvBC,EACAC,EAFuB,GAIpB,QADDC,iBACC,MADW,EACX,MADcC,qBACd,SACGC,EAAUD,EAAgBH,EAAEJ,aAAeI,EAAEF,OAC7CO,EAAUF,EAAgBF,EAAEL,aAAeK,EAAEH,OAE7CQ,EAASH,EAAgBH,EAAEL,YAAcK,EAAEH,MAC3CU,EAASJ,EAAgBF,EAAEN,YAAcM,EAAEJ,MAEjD,QACEG,EAAEP,IAAMW,EAAUF,EAAYD,EAAER,KAEhCO,EAAEP,IAAMS,EAAYD,EAAER,IAAMY,GAE5BL,EAAEN,KAAOY,EAASJ,EAAYD,EAAEP,MAEhCM,EAAEN,KAAOQ,EAAYD,EAAEP,KAAOa,IAIlC,SAASC,EAAQ5E,GACf,OAAIwD,MAAMqB,QAAQ7E,GACTA,EAGF,CAACA,GAOH,SAAS8E,EACdV,EACAC,GAOA,IAJA,IAFAC,EAEA,uDAFY,EACZS,EACA,uDADQ,EAEFC,EAAUZ,aAAaa,YAAc5B,EAAiBe,GAAKQ,EAAQR,GACnEc,EAAUb,aAAaY,YAAc5B,EAAiBgB,GAAKO,EAAQP,GAEhEtF,EAAI,EAAGA,EAAIiG,EAAQG,OAAQpG,IAClC,IAAK,IAAIqG,EAAI,EAAGA,EAAIF,EAAQC,OAAQC,IAClC,OAAOjB,EAAiBa,EAAQjG,GAAImG,EAAQE,GAAI,CAAEd,YAAWC,cAAyB,IAAVQ,ICvD3E,SAASM,EAAa/B,EAAmBnF,GAC9C,KAAOmF,GAAM,CACX,GAAIA,IAASnF,EACX,OAAO,EAGTmF,EAAOA,EAAKgC,WAGd,OAAO,ECTF,IAAMC,EAAO,aCeLC,EAVgBC,IAAMC,cAAuC,CAC1EC,WAAY,CACVC,SADU,SACDC,KACTC,WAFU,SAECD,KACXE,UAAWR,EACXS,eAAgBT,EAChBU,qBAAsB,kBAAM,S,8vCCJ1BC,E,mjBAKI,CACNC,EAAG,EACHC,EAAG,EACHnC,MAAO,EACPC,OAAQ,EACRmC,aAAa,I,mBAGoB,M,iBAE1B,kBAAM,EAAKC,a,0BAEF,SAACC,GACjB,EAAKD,UAAYC,K,gDAGV,MAC8BC,KAAKC,MAAlCC,EADD,EACCA,cAAeC,EADhB,EACgBA,UAEjBC,EAA0B,CAC9B9C,KAAM0C,KAAKK,MAAMT,EACjBvC,IAAK2C,KAAKK,MAAMV,EAChBlC,MAAOuC,KAAKK,MAAM5C,MAClBC,OAAQsC,KAAKK,MAAM3C,OACnB4C,OAAQ,IACRC,SAAUL,EAAgB,QAAU,WACpCM,OAAQ,WAGV,OACE,6BACGR,KAAKK,MAAMR,aACV,yBAAKE,IAAKC,KAAKS,gBAAiBC,MAAON,EAAUD,UAAWA,U,8BArC9CQ,a,EAAlBjB,E,eACkB,CACpBS,UAAW,yBA0CAT,Q,iqHCqCTkB,E,mjBA0BI,CAAEC,eAAe,I,2BAEN,G,2BAEA,G,qBAEN,G,yBAEI,G,2BAEE,G,6BAEE,G,oDAIW,CAC9BC,WAAY,EACZC,WAAY,EACZC,OAAQ,O,kBAGC,IAAIC,K,uBAEC,IAAIA,K,wBAEH,IAAIA,K,0BAEF,IAAIC,K,oBAEV,EAAKjB,MAAMkB,WAAYC,OAAO,CAAC,yBAA0B,8B,yBAErC,I,mBAEH,M,yBAEQ,M,yBAEA,M,sBAEvB,G,uBAEC,G,sBAE4B,M,yBA+C3B,WACf,IADqB,EACfrE,EAAkB,CACtBP,UAAW,EAAK6E,gBAAiB7E,UACjCI,WAAY,EAAKyE,gBAAiBzE,YAHf,IAMQ,EAAK0E,SAASC,UANtB,IAMrB,2BAAqD,SACpCC,mBAAmBzE,IAPf,kC,6BAWF,SAAC0E,GACpB,EAAKH,SAASI,IAAID,GACdA,EAAepB,MAAMsB,YACvB,EAAKC,cAAcF,IAAID,M,+BAIJ,SAACA,GACtB,EAAKH,SAAL,OAAqBG,GAErB,IAAMI,EACJ,EAAKD,cAAcE,IAAIL,IAAmB,EAAKM,eAAeD,IAAIL,GAEpE,EAAKG,cAAL,OAA0BH,GAC1B,EAAKM,eAAL,OAA2BN,GAEvBI,GAEF,EAAK5B,MAAM+B,sBAAuBP,EAAlC,EAAsD,EAAKG,mB,gCAkB/B,SAACnH,GAAiC,MAC9B,EAAK4G,gBAA/B7E,EADwD,EACxDA,UAAWI,EAD6C,EAC7CA,WAEnB,EAAKqF,eAAexH,EAAIyH,QAAS1F,GACjC,EAAK2F,kBAAkB1H,EAAIyH,QAAS1F,GACpC,EAAK4F,gBAAgB3H,EAAI4H,QAASzF,GAClC,EAAK0F,iBAAiB7H,EAAI4H,QAASzF,M,wBAGrB,SAAC2F,GAAmB,MACU,EAAKtC,MAAzCuC,EAD0B,EAC1BA,mBAAoBC,EADM,EACNA,YAE5B,OAAOtG,KAAKC,IAAImG,EAAQC,GAAuBC,K,yBAGhC,SAACP,EAAiBQ,GACjC,IAAMH,EAAS,EAAKI,aAActF,IAAM6E,GAEpCK,EAAS,GAAKL,EAAU,KAC1B,EAAKb,gBAAiB7E,UAAYkG,EAAa,EAAKE,cAAcL,O,4BAIlD,SAACL,EAAiBQ,GACpC,IAAMH,EAASL,EAAU,EAAKS,aAAcE,OAE5C,GAAIN,EAAS,GAAKL,EAAUhK,OAAO4K,YAAa,CAC9C,IAAMC,EAASL,EAAa,EAAKE,cAAcL,GAC/C,EAAKlB,gBAAiB7E,UAAYL,KAAK6G,IAAID,EAAQ,EAAKE,kB,0BAI1C,SAACZ,EAAiBa,GAClC,IAAMX,EAAS,EAAKI,aAAcrF,KAAO+E,EAEzC,GAAIE,EAAS,GAAKF,EAAU,EAAG,CAC7B,IAAMc,EAAUD,EAAc,EAAKN,cAAcL,GACjD,EAAKlB,gBAAiBzE,WAAauG,M,2BAIpB,SAACd,EAAiBa,GACnC,IAAMX,EAASF,EAAU,EAAKM,aAAcS,MAE5C,GAAIb,EAAS,GAAKF,EAAUnK,OAAOmL,WAAY,CAC7C,IAAMF,EAAUD,EAAc,EAAKN,cAAcL,GACjD,EAAKlB,gBAAiBzE,WAAaT,KAAK6G,IAAIG,EAAS,EAAKG,mB,0BAI5C,SAACC,GACjB,IAAM9I,EAAMG,EAAsB2I,GAGlC,GAFA,EAAKC,sBAAsB/I,IAEvB,EAAKgJ,iBAAT,CAGA,EAAKA,kBAAmB,EACxB,EAAKC,YAAa,EARgB,IAU1BC,EAV0B,KAU1BA,cACAtB,EAAqB5H,EAArB4H,QAASH,EAAYzH,EAAZyH,QAXiB,EAYA,EAAKb,gBAA/BzE,EAZ0B,EAY1BA,WAAYJ,EAZc,EAYdA,UAEdoH,EAAS1B,EAAU,EAAKS,aAActF,IAAMb,EAC5CsE,EAAa3E,KAAK6G,IAAIY,EAAQD,EAAc7C,YAE5C+C,EAASxB,EAAU,EAAKM,aAAcrF,KAAOV,EAC7CmE,EAAa5E,KAAK6G,IAAIa,EAAQF,EAAc5C,YAElD,EAAKjB,UAAWgE,SACd,CACElE,EAAGmB,EACHpB,EAAGmB,EACHjB,aAAa,EACbpC,MAAOtB,KAAK4H,IAAIF,EAASF,EAAc5C,YACvCrD,OAAQvB,KAAK4H,IAAIH,EAASD,EAAc7C,cAE1C,WACE,EAAKkD,kBACL,EAAK/D,MAAMgE,gBAAX,EAAgC,EAAKlC,iBACrC,EAAK0B,kBAAmB,S,0BAKZ,WAChB,IAAMS,EAAgB,EAAKpE,UAAWqE,SACtC,GAAKD,EAAL,CAFsB,IAMfE,EANe,EAMIvH,EAAiBqH,GANrB,MAQtB,EAAKG,YAAL,KACKD,EADL,CAEE7G,YAAa6G,EAAgB7G,aAAe,EAC5CC,aAAc4G,EAAgB5G,cAAgB,S,sBAIpC,SAAC4G,GAAwE,IAAtC/I,EAAsC,uDAAP,GAAO,EAChC,EAAK4E,MAAlDnC,EAD6E,EAC7EA,UAAWwG,EADkE,EAClEA,eAAgBC,EADkD,EAClDA,cAEnCH,EAAgB/G,KAAO,EAAKgE,gBAAiB7E,UAC7C4H,EAAgB9G,MAAQ,EAAK+D,gBAAiBzE,WAJuC,UAMlE,EAAK0E,SAASC,UANoD,IAMrF,2BAA2C,KAAhCiD,EAAgC,QACzC,EAAKC,YAAY,CACfD,OACAJ,kBACAtG,UAAWA,EACXyG,cAAeA,EACfD,eAAgBA,EAChBI,YAAarJ,GAAWA,EAAQqJ,eAbiD,kC,yBA6EtE,WAAM,UACF,EAAK9C,cAAcL,UADjB,IACrB,2BAAgD,KAArCiD,EAAqC,QAC9CA,EAAKV,SAAS,CAAEnC,YAAY,IAC5B,EAAKC,cAAL,OAA0B4C,IAHP,8BAMrB,EAAKV,SAAS,CAAEjD,eAAe,IAC/B,EAAKZ,MAAM0E,kBAAX,EAAkC,EAAK/C,gBACvC,EAAK3B,MAAM2E,sB,oBAGD,WACV,EAAKC,uBADW,UAGG,EAAKvD,SAASC,UAHjB,IAGhB,2BAA2C,KAAhCiD,EAAgC,QACpC,EAAKM,eAAeN,EAAK1H,OAAU0H,EAAKnE,MAAMsB,aACjD6C,EAAKV,SAAS,CAAEnC,YAAY,IAC5B,EAAKC,cAAcF,IAAI8C,KANX,8BAUhB,EAAKV,SAAS,CAAEjD,eAAe,IAC/B,EAAKZ,MAAM0E,kBAAX,EAAkC,EAAK/C,mB,oBAyB7B,SAACmD,GACX,IAAMC,GACHD,EAAElK,KAAKC,SAAS,WAChBK,EAAkB4J,EAAU,EAAG,CAC9BpJ,cAAe,EAAKsE,MAAMtE,cAC1BF,eAAgB,EAAKwE,MAAMxE,eAC3BF,eAAgB,EAAK0E,MAAM1E,eAC3BM,gBAAiB,EAAKoE,MAAMpE,kBAEhC,KAAI,EAAKoJ,kBAAoB,EAAKhF,MAAMiF,UAAYF,GAMpD,GAFA,EAAKH,uBAED,EAAKC,eAAeC,EAAE/D,QACxB,EAAKiE,kBAAmB,MAD1B,CAMI,EAAKhF,MAAMkF,cACb,EAAK3F,iBAEP,EAAKyF,kBAAmB,EACxB,EAAKG,gBAAiB,EACtB,IAAM3K,EAAMG,EAAsBmK,GAElC,IAAK,EAAK9E,MAAMoF,cAAgBxG,EAAapE,EAAIuG,OAAe,EAAKsE,iBAAmB,KAC/EC,EAD+E,EACjE1I,EAAiB,EAAKyI,iBAD2C,MAqBtF,IAnBiBhH,EACf,CACEjB,IAAKkI,EAAWlI,IAChBC,KAAMiI,EAAWjI,KACjBG,MAAO,EACPC,OAAQ,EACRF,aAAc+H,EAAW/H,aACzBD,YAAagI,EAAWhI,aAE1B,CACEF,IAAK5C,EAAI+K,MACTlI,KAAM7C,EAAIgL,MACVhI,MAAO,EACPC,OAAQ,EACRH,YAAa,EACbC,aAAc,IAKhB,OAIJ,EAAKkI,mBACL,EAAKC,iBAEL,EAAKhC,cAAgB,CACnB3C,OAAQvG,EAAIuG,OACZF,WAAYrG,EAAIyH,QAAU,EAAKS,aAActF,IAAM,EAAKgE,gBAAiB7E,UACzEuE,WAAYtG,EAAI4H,QAAU,EAAKM,aAAcrF,KAAO,EAAK+D,gBAAiBzE,YAG5EnC,EAAImL,iBAEJtJ,SAASuJ,iBAAiB,YAAa,EAAKC,iBAE5CxJ,SAASuJ,iBAAiB,UAAW,EAAKE,SAC1CzJ,SAASuJ,iBAAiB,WAAY,EAAKE,a,kBAY3B,SAACxC,GACjB,IAAI,EAAK6B,iBAIT,EAAKA,gBAAiB,EACtB,EAAKH,kBAAmB,EACxB,EAAKe,2BAEA,EAAKrC,eAAV,CAIA,IAAMlJ,EAAWG,EAAsB2I,GAC/BkC,EAAiBhL,EAAjBgL,MAAOD,EAAU/K,EAAV+K,MAEf,IAAK,EAAK9B,YAAc7E,EAAapE,EAAIuG,OAAuB,EAAKsE,iBACnE,EAAKW,YAAYxL,EAAK+K,EAAOC,OACxB,WACc,EAAK1D,eAAeR,UADlC,IACL,2BAAiD,SAC1CuC,SAAS,CAAEnC,YAAY,EAAM9B,aAAa,KAF5C,8BAIL,EAAK+B,cAAgB,IAAIX,IAAJ,YAAY,EAAKW,eAAjB,EAAmC,EAAKG,kBAC7D,EAAKA,eAAemE,QAEF,IAAdzL,EAAIsB,OAAe,EAAK4H,cAAc3C,SAAWvG,EAAIuG,QACvD,EAAKmF,aAAa1L,EAAIuG,OAAQ,SAGhC,EAAKlB,UAAWgE,SAAS,CACvBjE,aAAa,EACbpC,MAAO,EACPC,OAAQ,IAEV,EAAKuC,MAAM0E,kBAAX,EAAkC,EAAK/C,gBAGzC,EAAKwE,sBACL,EAAKC,UACL,EAAK3C,YAAa,M,sBAGN,SAACjJ,GACO,KAAhBA,EAAI6L,SAEN,EAAK9G,oB,sBAeK,SAACO,GACb,EAAKuF,gBAAkBvF,K,0BAGP,SAACA,GACjB,EAAKD,UAAYC,K,+BAIK,CACtBQ,SAAU,a,sBAGG,CACbpB,WAAY,CACVC,SAAU,EAAKoC,mBACflC,WAAY,EAAKiH,qBACjBhH,UAAW,EAAKA,UAChBC,eAAgB,EAAKA,eACrBC,qBAAsB,kBAAM,EAAK4B,oB,2DA3d/BrB,KAAKC,MAAMoB,gBACbrB,KAAKqB,gBAAkB/E,SAASkK,cAAcxG,KAAKC,MAAMoB,iBAEzDrB,KAAKqB,gBAAkBrB,KAAKsF,gBAG9BtF,KAAKsF,gBAAiBO,iBAAiB,YAAa7F,KAAKyG,WACzDzG,KAAKsF,gBAAiBO,iBAAiB,aAAc7F,KAAKyG,WAEtDzG,KAAKC,MAAMyG,gBACbpK,SAASuJ,iBAAiB,UAAW7F,KAAK2G,aAC1CrK,SAASuJ,iBAAiB,QAAS7F,KAAK2G,gB,6CAK1C3G,KAAKsF,gBAAiBsB,oBAAoB,YAAa5G,KAAKyG,WAC5DzG,KAAKsF,gBAAiBsB,oBAAoB,aAAc5G,KAAKyG,WAEzDzG,KAAKC,MAAMyG,gBACbpK,SAASsK,oBAAoB,UAAW5G,KAAK2G,aAC7CrK,SAASsK,oBAAoB,QAAS5G,KAAK2G,cAG7C3G,KAAKgG,2BAGLhG,KAAK4B,cAAcsE,QACnBlG,KAAK+B,eAAemE,U,iDAIpB5J,SAASsK,oBAAoB,YAAa5G,KAAK8F,iBAE/CxJ,SAASsK,oBAAoB,UAAW5G,KAAK+F,SAC7CzJ,SAASsK,oBAAoB,WAAY5G,KAAK+F,W,yCAI9C/F,KAAK2C,aAAe3C,KAAKqB,gBAAiBwF,wBAC1C7G,KAAKiD,aAAejD,KAAKqB,gBAAiByF,aAAe9G,KAAKqB,gBAAiB0F,aAC/E/G,KAAKsD,cAAgBtD,KAAKqB,gBAAiB2F,YAAchH,KAAKqB,gBAAiB4F,c,4CAoC3D,IAElBrF,EAEE5B,KAFF4B,cACSf,EACPb,KADFK,MAASQ,cAGPe,EAAcsF,OAASrG,GACzBb,KAAK8D,SAAS,CAAEjD,eAAe,KAE5Be,EAAcsF,MAAQrG,GACzBb,KAAK8D,SAAS,CAAEjD,eAAe,M,kCA2HvBxF,GAA8B,IAChCmJ,EAAiFnJ,EAAjFmJ,KAAM1G,EAA2EzC,EAA3EyC,UAAWsG,EAAgE/I,EAAhE+I,gBAAiBE,EAA+CjJ,EAA/CiJ,eAAgBC,EAA+BlJ,EAA/BkJ,cAAeG,EAAgBrJ,EAAhBqJ,YAEzE,GAAI1E,KAAK8E,eAAeN,EAAK1H,MAC3B,OAAO,KAJ+B,IAOhCyB,EAAUyB,KAAKC,MAAf1B,MACF4I,EAAa7I,EAAiB8F,EAAiBI,EAAK4C,OAAStJ,EAAWS,GARtC,EASJiG,EAAKnE,MAAjCR,EATgC,EAShCA,YAAa8B,EATmB,EASnBA,WAErB,GAAI+C,GAAeyC,EAUjB,OATIxF,EACF3B,KAAK4B,cAAL,OAA0B4C,GAE1BxE,KAAK4B,cAAcF,IAAI8C,GAGzBA,EAAKV,SAAS,CAAEnC,YAAaA,IAC7B3B,KAAKqH,YAAc7C,EAEZA,EAGT,IAAKE,GAAeyC,EAAY,CAC9B,GAAIxF,GAAc2C,KAAoBtE,KAAKsH,kBAAoB/C,GAM7D,OALAC,EAAKV,SAAS,CAAEnC,YAAY,IAC5B6C,EAAK+C,YAAa,EAElBvH,KAAKwH,oBAAqB,EAEnBxH,KAAK4B,cAAL,OAA0B4C,GAGnC,IAAMiD,EAAYlD,GAAiBC,EAAK+C,YAAcvH,KAAKwH,mBAE3D,IAAK3H,IAAgB8B,GAAc8F,EAMjC,OALAjD,EAAKV,SAAS,CAAEjE,aAAa,IAE7BG,KAAKsH,kBAAmB,EACxBtH,KAAK+B,eAAeL,IAAI8C,GAEjB,CAAER,iBAAiB,GAI9B,OAAKU,IAAgByC,GAActH,GAC7BG,KAAK+B,eAAeD,IAAI0C,IAC1BA,EAAKV,SAAS,CAAEjE,aAAa,IAE7BG,KAAK+B,eAAL,OAA2ByC,GAEpB,CAAER,iBAAiB,IAIvB,O,qCA4BMhD,GACb,GAAKA,EAAL,CAIA,QAA0C0G,IAAtC1H,KAAK2H,iBAAiBvO,IAAI4H,GAC5B,OAAOhB,KAAK2H,iBAAiBvO,IAAI4H,GAGnC,IAAM4G,EAAkB5H,KAAK6H,gBAAgBC,MAC3C,SAAAC,GAAW,OAAI/G,IAAW+G,GAAeA,EAAYC,SAAShH,MAKhE,OAFAhB,KAAK2H,iBAAiBM,IAAIjH,EAAQ4G,GAE3BA,K,6CAIP5H,KAAK6H,gBAAkB7K,MAAMC,KAAKX,SAAS4L,iBAAiBlI,KAAKmB,WAAWgH,KAAK,U,mCA0EtEnH,EAAqBnG,GAMhCmG,EAAO6E,iBAAiBhL,GALD,SAAjBuN,EAAkB3N,GACtBuG,EAAO4F,oBAAoB/L,EAAMuN,GAAgB,GACjD3N,EAAImL,iBACJnL,EAAI4N,qBAEwC,K,gCAwD9C,GAHArI,KAAKwH,oBAAqB,EAC1BxH,KAAKsH,kBAAmB,EAEpBtH,KAAKC,MAAMsE,cAAe,WACTvE,KAAKsB,SAASC,UADL,IAC5B,2BAA2C,QACpCgG,YAAa,EAFQ,kC,kCA8BpB9M,EAAU4C,EAAaC,GACjC,GAAK0C,KAAKC,MAAMqI,cAAhB,CAD+C,MAK0BtI,KAAKC,MAAtEsI,EALuC,EAKvCA,eAAgBC,EALuB,EAKvBA,0BAA2B7D,EALJ,EAKIA,kBAC7C8D,EAAchO,EAAIuG,OAAuB0H,WAAa,GACtDC,EAA0B3L,MAAMC,KAAKwL,GAAY3N,SAASyN,IAG9DC,GACAxI,KAAK4B,cAAcsF,MACnByB,GACAlO,EAAIe,WAEJwE,KAAKqE,YACH,CACEhH,MACAC,OACAG,MAAO,EACPC,OAAQ,EACRH,YAAa,EACbC,aAAc,GAEhB,CAAEkH,aAAa,IAGjBC,EAAiB,EAAM3E,KAAK4B,eAAgB5B,KAAKqH,aAE/B,IAAd5M,EAAIsB,OACNiE,KAAKmG,aAAa1L,EAAIuG,OAAQ,SAEd,IAAdvG,EAAIsB,OAA6B,IAAdtB,EAAIsB,OACzBiE,KAAKmG,aAAa1L,EAAIuG,OAAQ,mB,+BAK3B,IACCH,EAAkBb,KAAKK,MAAvBQ,cADD,EAUHb,KAAKC,MAVF,IAGL2I,UAAWC,OAHN,MAGuB,MAHvB,EAIL1I,EAJK,EAILA,UACAO,EALK,EAKLA,MACAoI,EANK,EAMLA,mBACA5I,EAPK,EAOLA,cACA6I,EARK,EAQLA,mBACAC,EATK,EASLA,SAGF,OACE,kBAAC,EAAuBC,SAAxB,CAAiCzP,MAAOwG,KAAKkJ,cAC3C,kBAACL,EAAD,CACE9I,IAAKC,KAAKmJ,YACVzI,MAAK,KAAOV,KAAKoJ,sBAAZ,GAAsC1I,GAC3CP,UAAS,UAAKA,EAAL,YAAkBU,EAAgBiI,EAAqB,KAEhE,kBAAC,EAAD,CACE/I,IAAKC,KAAKS,gBACVN,UAAW4I,EACX7I,cAAeA,IAEhB8I,S,8BAtmBmBrI,a,EAAxBC,E,eACkB,CACpB2H,eAAgB,GAChBzK,UAAW,EACXuH,aAAa,EACblE,WAAY,GACZsB,YAAa,IACbD,mBAAoB,GACpByB,gBAAiBlF,EACjB4F,kBAAmB5F,EACnB6F,iBAAkB7F,EAClBiD,sBAAuBjD,EACvByJ,2BAA2B,EAC3BM,mBAAoB,oBACpB3D,cAAc,EACdD,UAAU,EACVwB,eAAe,EACfxG,eAAe,EACf3B,MAAO,EACP5C,eAAe,EACfF,gBAAgB,EAChBF,gBAAgB,EAChBM,iBAAiB,EACjByM,eAAe,IAslBJ1H,Q,48CC9rBf,IA6CeyI,GA7CU,SAACC,GAAD,gC,mOAAA,U,QAAA,G,EAAA,E,+IAAA,+GAAC,EAAD,oCAAC,QAYd,CACN3H,WAAY,EAAK1B,MAAM0B,WACvB9B,aAAa,IAdM,GAAC,YAiBK,MAjBN,GAAC,cAmBa,MAnBd,GAAC,2BA6BD,SAAC9C,GACpB,EAAKqK,OAASvK,EAAiB,EAAKC,KAAOC,GAC3C,EAAKwM,QAAQpK,WAAWC,SAAxB,SA/BmB,GAAC,yBAkCH,SAACW,GAClB,EAAKjD,KAAOiD,KAnCO,S,EAAA,G,EAAA,2CAsBnBC,KAAKwB,uBAtBc,6CA0BnBxB,KAAKuJ,QAAQpK,WAAWG,WAAWU,QA1BhB,+BAuCnB,OACE,kBAACsJ,EAAD,KAAsBtJ,KAAKC,MAAWD,KAAKK,MAA3C,CAAkDmJ,cAAexJ,KAAKyJ,yB,2BAxCrD,GACM9I,aADN,mBAEA3B,GAFA,oBAQC,CACpB2C,YAAY,IATO,G,k1DCKnB+H,G,0jBAG0B,M,uBAMjB,SAAC3J,GACZ,EAAKpI,KAAOoI,K,2DAJZC,KAAKrI,KAAMkO,iBAAiB,aAAa,SAACpL,GAAD,OAAgBA,EAAI4N,uB,+BAOtD,MAC2ErI,KAAKC,MADhF,IACC2I,UAAWe,OADZ,MAC8B,MAD9B,EACqCX,EADrC,EACqCA,SADrC,IAC+C7I,iBAD/C,MAC2D,GAD3D,EACkEyJ,EADlE,2CAGP,OACE,kBAACD,EAAD,IACE5J,IAAKC,KAAK6J,WACV1J,UAAS,gCAA2BA,GACpC2J,QAAS9J,KAAKuJ,QAAQpK,WAAWI,WAC7BqK,GAEHZ,Q,gCAvBqBrI,a,GAAxB+I,G,cACiB1K,GA4BR0K,U,k1DC7BTK,G,0jBAG0B,M,uBAMjB,SAAChK,GACZ,EAAKpI,KAAOoI,K,2DAJZC,KAAKrI,KAAMkO,iBAAiB,aAAa,SAACpL,GAAD,OAAgBA,EAAI4N,uB,+BAOtD,MACsErI,KAAKC,MAD3E,IACC2I,UAAWe,OADZ,MAC8B,MAD9B,EACqCX,EADrC,EACqCA,SAAU7I,EAD/C,EAC+CA,UAAcyJ,EAD7D,2CAGP,OACE,kBAACD,EAAD,IACE5J,IAAKC,KAAK6J,WACV1J,UAAS,gCAA2BA,GACpC2J,QAAS9J,KAAKuJ,QAAQpK,WAAWK,gBAC7BoK,GAEHZ,Q,gCAvBuBrI,a,GAA1BoJ,G,cACiB/K,GA4BR+K,U","file":"react-selectable-fast.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"React-Selectable-Fast\"] = factory(require(\"react\"));\n\telse\n\t\troot[\"React-Selectable-Fast\"] = factory(root[\"React\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import { MouseEvent } from 'react'\n\nconst propertiesToNormalize = ['pageX', 'pageY', 'clientX', 'clientY']\n\nfunction patchEventProperties(evt: any, touchKey: string) {\n  propertiesToNormalize.forEach(key => {\n    if (typeof evt[key] === 'undefined') {\n      evt[key] = evt[touchKey][0][key]\n    }\n  })\n}\n\n/**\n * Used to return event object with desktop (non-touch) format of event\n * coordinates, regardless of whether the action is from mobile or desktop.\n */\nexport function castTouchToMouseEvent(evt: any): MouseEvent<HTMLElement> {\n  if (evt.type.includes('mouse')) {\n    return evt\n  }\n\n  try {\n    if (evt.type === 'touchstart') {\n      patchEventProperties(evt, 'targetTouches')\n    } else if (evt.type === 'touchmove') {\n      patchEventProperties(evt, 'changedTouches')\n    }\n  } catch (err) {\n    console.error(err.message)\n  }\n\n  return evt as MouseEvent<HTMLElement>\n}\n","import { MouseEvent } from 'react'\n\ntype TDetectMouseButtonOptions = {\n  allowAltClick?: boolean\n  allowCtrlClick?: boolean\n  allowMetaClick?: boolean\n  allowShiftClick?: boolean\n}\n\n/**\n * @buttonNumber\n * 1: Left button\n * 2: Middle/Right button\n * 3: Right/Back button\n */\nexport function detectMouseButton(\n  evt: MouseEvent<HTMLElement>,\n  buttonNumber = 1,\n  options: TDetectMouseButtonOptions = {}\n) {\n  if (\n    (evt.metaKey && !options.allowMetaClick) ||\n    (evt.ctrlKey && !options.allowCtrlClick) ||\n    (evt.altKey && !options.allowAltClick) ||\n    (evt.shiftKey && !options.allowShiftClick)\n  ) {\n    return false\n  }\n\n  if ('buttons' in evt) {\n    return evt.buttons === buttonNumber\n  }\n\n  if ('which' in evt) {\n    return (evt as KeyboardEvent).which === buttonNumber\n  }\n\n  return (evt as MouseEvent).button === buttonNumber - 1\n}\n","export type TGetBoundsForNodeArgs = {\n  scrollTop: number\n  scrollLeft: number\n}\n\nexport type TComputedBounds = {\n  top: number\n  left: number\n  width: number\n  height: number\n  offsetWidth: number\n  offsetHeight: number\n}\n\nexport function getDocumentScroll() {\n  const documentScrollTop = Math.max(\n    window.pageYOffset,\n    document.documentElement.scrollTop,\n    document.body.scrollTop\n  )\n\n  const documentScrollLeft = Math.max(\n    window.pageXOffset,\n    document.documentElement.scrollLeft,\n    document.body.scrollLeft\n  )\n\n  return { documentScrollTop, documentScrollLeft }\n}\n\n/**\n * Given a node, get everything needed to calculate its boundaries\n */\nexport function getBoundsForNode(\n  node: HTMLElement,\n  containerScroll: TGetBoundsForNodeArgs = { scrollTop: 0, scrollLeft: 0 }\n): TComputedBounds[] {\n  const { scrollTop, scrollLeft } = containerScroll\n  const { documentScrollTop, documentScrollLeft } = getDocumentScroll()\n\n  return Array.from(node.getClientRects()).map(rect => ({\n    top: rect.top + documentScrollTop + scrollTop,\n    left: rect.left + documentScrollLeft + scrollLeft,\n    offsetWidth: node.offsetWidth,\n    offsetHeight: node.offsetHeight,\n    width: rect.width,\n    height: rect.height\n  }))\n}\n","import { getBoundsForNode, TComputedBounds } from './getBoundsForNode'\n\ntype TAreBoundsCollideOptions = {\n  tolerance?: number\n  useOffsetSize?: boolean\n}\n\n/**\n * Given offsets, widths, and heights of two objects, determine if they collide (overlap).\n */\nconst areBoundsCollide = (\n  a: TComputedBounds,\n  b: TComputedBounds,\n  { tolerance = 0, useOffsetSize = false }: TAreBoundsCollideOptions\n) => {\n  const aHeight = useOffsetSize ? a.offsetHeight : a.height\n  const bHeight = useOffsetSize ? b.offsetHeight : b.height\n\n  const aWidth = useOffsetSize ? a.offsetWidth : a.width\n  const bWidth = useOffsetSize ? b.offsetWidth : b.width\n\n  return !(\n    a.top + aHeight - tolerance < b.top ||\n    // 'a' top doesn't touch 'b' bottom\n    a.top + tolerance > b.top + bHeight ||\n    // 'a' right doesn't touch 'b' left\n    a.left + aWidth - tolerance < b.left ||\n    // 'a' left doesn't touch 'b' right\n    a.left + tolerance > b.left + bWidth\n  )\n}\n\nfunction toArray(value: any) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  return [value]\n}\n\n/**\n * Given two objects containing \"top\", \"left\", \"offsetWidth\" and \"offsetHeight\"\n * properties, determine if they collide.\n */\nexport function doObjectsCollide(\n  a: HTMLElement | TComputedBounds | TComputedBounds[],\n  b: HTMLElement | TComputedBounds | TComputedBounds[],\n  tolerance = 0,\n  delta = 1\n) {\n  const aBounds = a instanceof HTMLElement ? getBoundsForNode(a) : toArray(a)\n  const bBounds = b instanceof HTMLElement ? getBoundsForNode(b) : toArray(b)\n\n  for (let i = 0; i < aBounds.length; i++) {\n    for (let j = 0; j < bBounds.length; j++) {\n      return areBoundsCollide(aBounds[i], bBounds[j], { tolerance, useOffsetSize: delta === 1 })\n    }\n  }\n}\n","export function isNodeInRoot(node: HTMLElement, root: HTMLElement) {\n  while (node) {\n    if (node === root) {\n      return true\n    }\n\n    node = node.parentNode as any\n  }\n\n  return false\n}\n","export const noop = () => {}\nexport type Maybe<T> = T | null\n\nexport * from './castTouchToMouseEvent'\nexport * from './detectMouseButton'\nexport * from './doObjectsCollide'\nexport * from './getBoundsForNode'\nexport * from './nodeInRoot'\n","import React from 'react'\n\nimport { TSelectableGroupContext, TSelectableItem } from './Selectable.types'\nimport { noop } from './utils'\n\nconst SelectableGroupContext = React.createContext<TSelectableGroupContext>({\n  selectable: {\n    register(_: TSelectableItem) {},\n    unregister(_: TSelectableItem) {},\n    selectAll: noop,\n    clearSelection: noop,\n    getScrolledContainer: () => null\n  }\n})\n\nexport default SelectableGroupContext\n","import React, { Component, CSSProperties } from 'react'\n\ntype TSelectboxProps = {\n  fixedPosition: boolean\n  className: string\n}\n\nclass Selectbox extends Component<TSelectboxProps> {\n  static defaultProps = {\n    className: 'selectable-selectbox'\n  }\n\n  state = {\n    y: 0,\n    x: 0,\n    width: 0,\n    height: 0,\n    isSelecting: false\n  }\n\n  selectbox: HTMLDivElement | null = null\n\n  getRef = () => this.selectbox\n\n  getSelectboxRef = (ref: HTMLDivElement | null) => {\n    this.selectbox = ref\n  }\n\n  render() {\n    const { fixedPosition, className } = this.props\n\n    const boxStyle: CSSProperties = {\n      left: this.state.x,\n      top: this.state.y,\n      width: this.state.width,\n      height: this.state.height,\n      zIndex: 9000,\n      position: fixedPosition ? 'fixed' : 'absolute',\n      cursor: 'default'\n    }\n\n    return (\n      <div>\n        {this.state.isSelecting && (\n          <div ref={this.getSelectboxRef} style={boxStyle} className={className} />\n        )}\n      </div>\n    )\n  }\n}\n\nexport default Selectbox\n","import React, { Component, MouseEvent } from 'react'\nimport { ReactComponentLike } from 'prop-types'\n\nimport {\n  castTouchToMouseEvent,\n  detectMouseButton,\n  doObjectsCollide,\n  getBoundsForNode,\n  isNodeInRoot,\n  noop,\n  Maybe,\n  TComputedBounds\n} from './utils'\nimport { TSelectableItem } from './Selectable.types'\nimport SelectableGroupContext from './Context'\nimport Selectbox from './Selectbox'\n\ntype TSelectItemsOptions = {\n  isFromClick?: boolean\n}\n\ntype TMouseDownData = {\n  selectboxY: number\n  selectboxX: number\n  target: HTMLElement | null\n}\n\ntype TProcessItemOptions = TSelectItemsOptions & {\n  item: TSelectableItem\n  tolerance: number\n  selectboxBounds: TComputedBounds\n  enableDeselect: boolean\n  mixedDeselect: boolean\n}\n\nexport type TSelectableGroupProps = {\n  globalMouse?: boolean\n  ignoreList?: string[]\n  scrollSpeed?: number\n  minimumSpeedFactor?: number\n  allowClickWithoutSelected?: boolean\n  className?: string\n  clickClassName?: string\n  selectboxClassName?: string\n  style?: object\n  selectionModeClass?: string\n  // Event that will fire when items are selected. Passes an array of keys.\n  onSelectionFinish?: Function\n  onSelectionClear?: Function\n  onSelectedItemUnmount?: Function\n  enableDeselect?: boolean\n  mixedDeselect?: boolean\n  deselectOnEsc?: boolean\n  resetOnStart?: boolean\n  disabled?: boolean\n  delta?: number\n  allowAltClick?: boolean\n  allowCtrlClick?: boolean\n  allowMetaClick?: boolean\n  allowShiftClick?: boolean\n  selectOnClick?: boolean\n  // Scroll container selector\n  scrollContainer?: string\n\n  /**\n   * Event that will fire rapidly during selection (while the selector is\n   * being dragged). Passes an array of keys.\n   */\n  duringSelection?: Function\n\n  // The component that will represent the Selectable DOM node\n  component?: ReactComponentLike\n\n  /**\n   * Amount of forgiveness an item will offer to the selectbox before registering\n   * a selection, i.e. if only 1px of the item is in the selection, it shouldn't be\n   * included.\n   */\n  tolerance?: number\n\n  /**\n   * In some cases, it the bounding box may need fixed positioning, if your layout\n   * is relying on fixed positioned elements, for instance.\n   * @type boolean\n   */\n  fixedPosition?: boolean\n}\n\nclass SelectableGroup extends Component<TSelectableGroupProps> {\n  static defaultProps = {\n    clickClassName: '',\n    tolerance: 0,\n    globalMouse: false,\n    ignoreList: [],\n    scrollSpeed: 0.25,\n    minimumSpeedFactor: 60,\n    duringSelection: noop,\n    onSelectionFinish: noop,\n    onSelectionClear: noop,\n    onSelectedItemUnmount: noop,\n    allowClickWithoutSelected: true,\n    selectionModeClass: 'in-selection-mode',\n    resetOnStart: false,\n    disabled: false,\n    deselectOnEsc: true,\n    fixedPosition: false,\n    delta: 1,\n    allowAltClick: false,\n    allowCtrlClick: false,\n    allowMetaClick: false,\n    allowShiftClick: false,\n    selectOnClick: true\n  }\n\n  state = { selectionMode: false }\n\n  mouseDownStarted = false\n\n  mouseMoveStarted = false\n\n  mouseMoved = false\n\n  mouseUpStarted = false\n\n  selectionStarted = false\n\n  deselectionStarted = false\n\n  clickedItem?: TSelectableItem\n\n  mouseDownData: TMouseDownData = {\n    selectboxY: 0,\n    selectboxX: 0,\n    target: null\n  }\n\n  registry = new Set<TSelectableItem>()\n\n  selectedItems = new Set<TSelectableItem>()\n\n  selectingItems = new Set<TSelectableItem>()\n\n  ignoreCheckCache = new Map<HTMLElement, boolean>()\n\n  ignoreList = this.props.ignoreList!.concat(['.selectable-select-all', '.selectable-deselect-all'])\n\n  ignoreListNodes: HTMLElement[] = []\n\n  selectbox: Maybe<Selectbox> = null\n\n  selectableGroup: Maybe<HTMLElement> = null\n\n  scrollContainer: Maybe<HTMLElement> = null\n\n  maxScrollTop = 0\n\n  maxScrollLeft = 0\n\n  scrollBounds: Maybe<DOMRect | ClientRect> = null\n\n  componentDidMount() {\n    if (this.props.scrollContainer) {\n      this.scrollContainer = document.querySelector(this.props.scrollContainer)\n    } else {\n      this.scrollContainer = this.selectableGroup\n    }\n\n    this.selectableGroup!.addEventListener('mousedown', this.mouseDown)\n    this.selectableGroup!.addEventListener('touchstart', this.mouseDown)\n\n    if (this.props.deselectOnEsc) {\n      document.addEventListener('keydown', this.keyListener)\n      document.addEventListener('keyup', this.keyListener)\n    }\n  }\n\n  componentWillUnmount() {\n    this.selectableGroup!.removeEventListener('mousedown', this.mouseDown)\n    this.selectableGroup!.removeEventListener('touchstart', this.mouseDown)\n\n    if (this.props.deselectOnEsc) {\n      document.removeEventListener('keydown', this.keyListener)\n      document.removeEventListener('keyup', this.keyListener)\n    }\n\n    this.removeTempEventListeners()\n\n    // Prevent onSelectedItemUnmount calls\n    this.selectedItems.clear()\n    this.selectingItems.clear()\n  }\n\n  removeTempEventListeners() {\n    document.removeEventListener('mousemove', this.updateSelectBox)\n    // document.removeEventListener('touchmove', this.updateSelectBox)\n    document.removeEventListener('mouseup', this.mouseUp)\n    document.removeEventListener('touchend', this.mouseUp)\n  }\n\n  updateRootBounds() {\n    this.scrollBounds = this.scrollContainer!.getBoundingClientRect()\n    this.maxScrollTop = this.scrollContainer!.scrollHeight - this.scrollContainer!.clientHeight\n    this.maxScrollLeft = this.scrollContainer!.scrollWidth - this.scrollContainer!.clientWidth\n  }\n\n  updateRegistry = () => {\n    const containerScroll = {\n      scrollTop: this.scrollContainer!.scrollTop,\n      scrollLeft: this.scrollContainer!.scrollLeft\n    }\n\n    for (const selectableItem of this.registry.values()) {\n      selectableItem.registerSelectable(containerScroll)\n    }\n  }\n\n  registerSelectable = (selectableItem: TSelectableItem) => {\n    this.registry.add(selectableItem)\n    if (selectableItem.state.isSelected) {\n      this.selectedItems.add(selectableItem)\n    }\n  }\n\n  unregisterSelectable = (selectableItem: TSelectableItem) => {\n    this.registry.delete(selectableItem)\n\n    const isRemoved =\n      this.selectedItems.has(selectableItem) || this.selectingItems.has(selectableItem)\n\n    this.selectedItems.delete(selectableItem)\n    this.selectingItems.delete(selectableItem)\n\n    if (isRemoved) {\n      // Notify third-party dev that component did unmount and handled item probably should be deleted\n      this.props.onSelectedItemUnmount!(selectableItem, [...this.selectedItems])\n    }\n  }\n\n  toggleSelectionMode() {\n    const {\n      selectedItems,\n      state: { selectionMode }\n    } = this\n\n    if (selectedItems.size && !selectionMode) {\n      this.setState({ selectionMode: true })\n    }\n    if (!selectedItems.size && selectionMode) {\n      this.setState({ selectionMode: false })\n    }\n  }\n\n  private updateContainerScroll = (evt: MouseEvent<HTMLElement>) => {\n    const { scrollTop, scrollLeft } = this.scrollContainer!\n\n    this.checkScrollTop(evt.clientY, scrollTop)\n    this.checkScrollBottom(evt.clientY, scrollTop)\n    this.checkScrollLeft(evt.clientX, scrollLeft)\n    this.checkScrollRight(evt.clientX, scrollLeft)\n  }\n\n  getScrollStep = (offset: number) => {\n    const { minimumSpeedFactor, scrollSpeed } = this.props\n\n    return Math.max(offset, minimumSpeedFactor!) * scrollSpeed!\n  }\n\n  checkScrollTop = (clientY: number, currentTop: number) => {\n    const offset = this.scrollBounds!.top - clientY\n\n    if (offset > 0 || clientY < 0) {\n      this.scrollContainer!.scrollTop = currentTop - this.getScrollStep(offset)\n    }\n  }\n\n  checkScrollBottom = (clientY: number, currentTop: number) => {\n    const offset = clientY - this.scrollBounds!.bottom\n\n    if (offset > 0 || clientY > window.innerHeight) {\n      const newTop = currentTop + this.getScrollStep(offset)\n      this.scrollContainer!.scrollTop = Math.min(newTop, this.maxScrollTop)\n    }\n  }\n\n  checkScrollLeft = (clientX: number, currentLeft: number) => {\n    const offset = this.scrollBounds!.left - clientX\n\n    if (offset > 0 || clientX < 0) {\n      const newLeft = currentLeft - this.getScrollStep(offset)\n      this.scrollContainer!.scrollLeft = newLeft\n    }\n  }\n\n  checkScrollRight = (clientX: number, currentLeft: number) => {\n    const offset = clientX - this.scrollBounds!.right\n\n    if (offset > 0 || clientX > window.innerWidth) {\n      const newLeft = currentLeft + this.getScrollStep(offset)\n      this.scrollContainer!.scrollLeft = Math.min(newLeft, this.maxScrollLeft)\n    }\n  }\n\n  updateSelectBox = (event: Event) => {\n    const evt = castTouchToMouseEvent(event)\n    this.updateContainerScroll(evt)\n\n    if (this.mouseMoveStarted) {\n      return\n    }\n    this.mouseMoveStarted = true\n    this.mouseMoved = true\n\n    const { mouseDownData } = this\n    const { clientX, clientY } = evt\n    const { scrollLeft, scrollTop } = this.scrollContainer!\n\n    const pointY = clientY - this.scrollBounds!.top + scrollTop\n    const selectboxY = Math.min(pointY, mouseDownData.selectboxY)\n\n    const pointX = clientX - this.scrollBounds!.left + scrollLeft\n    const selectboxX = Math.min(pointX, mouseDownData.selectboxX)\n\n    this.selectbox!.setState(\n      {\n        x: selectboxX,\n        y: selectboxY,\n        isSelecting: true,\n        width: Math.abs(pointX - mouseDownData.selectboxX),\n        height: Math.abs(pointY - mouseDownData.selectboxY)\n      },\n      () => {\n        this.updateSelecting()\n        this.props.duringSelection!([...this.selectingItems])\n        this.mouseMoveStarted = false\n      }\n    )\n  }\n\n  updateSelecting = () => {\n    const selectboxNode = this.selectbox!.getRef()\n    if (!selectboxNode) {\n      return\n    }\n\n    const [selectboxBounds] = getBoundsForNode(selectboxNode)\n\n    this.selectItems({\n      ...selectboxBounds,\n      offsetWidth: selectboxBounds.offsetWidth || 1,\n      offsetHeight: selectboxBounds.offsetHeight || 1\n    })\n  }\n\n  selectItems = (selectboxBounds: TComputedBounds, options: TSelectItemsOptions = {}) => {\n    const { tolerance, enableDeselect, mixedDeselect } = this.props\n\n    selectboxBounds.top += this.scrollContainer!.scrollTop\n    selectboxBounds.left += this.scrollContainer!.scrollLeft\n\n    for (const item of this.registry.values()) {\n      this.processItem({\n        item,\n        selectboxBounds,\n        tolerance: tolerance!,\n        mixedDeselect: mixedDeselect!,\n        enableDeselect: enableDeselect!,\n        isFromClick: options && options.isFromClick\n      })\n    }\n  }\n\n  processItem(options: TProcessItemOptions) {\n    const { item, tolerance, selectboxBounds, enableDeselect, mixedDeselect, isFromClick } = options\n\n    if (this.isInIgnoreList(item.node)) {\n      return null\n    }\n\n    const { delta } = this.props\n    const isCollided = doObjectsCollide(selectboxBounds, item.bounds!, tolerance, delta)\n    const { isSelecting, isSelected } = item.state\n\n    if (isFromClick && isCollided) {\n      if (isSelected) {\n        this.selectedItems.delete(item)\n      } else {\n        this.selectedItems.add(item)\n      }\n\n      item.setState({ isSelected: !isSelected })\n      this.clickedItem = item\n\n      return item\n    }\n\n    if (!isFromClick && isCollided) {\n      if (isSelected && enableDeselect && (!this.selectionStarted || mixedDeselect)) {\n        item.setState({ isSelected: false })\n        item.deselected = true\n\n        this.deselectionStarted = true\n\n        return this.selectedItems.delete(item)\n      }\n\n      const canSelect = mixedDeselect ? !item.deselected : !this.deselectionStarted\n\n      if (!isSelecting && !isSelected && canSelect) {\n        item.setState({ isSelecting: true })\n\n        this.selectionStarted = true\n        this.selectingItems.add(item)\n\n        return { updateSelecting: true }\n      }\n    }\n\n    if (!isFromClick && !isCollided && isSelecting) {\n      if (this.selectingItems.has(item)) {\n        item.setState({ isSelecting: false })\n\n        this.selectingItems.delete(item)\n\n        return { updateSelecting: true }\n      }\n    }\n\n    return null\n  }\n\n  clearSelection = () => {\n    for (const item of this.selectedItems.values()) {\n      item.setState({ isSelected: false })\n      this.selectedItems.delete(item)\n    }\n\n    this.setState({ selectionMode: false })\n    this.props.onSelectionFinish!([...this.selectedItems])\n    this.props.onSelectionClear!()\n  }\n\n  selectAll = () => {\n    this.updateWhiteListNodes()\n\n    for (const item of this.registry.values()) {\n      if (!this.isInIgnoreList(item.node) && !item.state.isSelected) {\n        item.setState({ isSelected: true })\n        this.selectedItems.add(item)\n      }\n    }\n\n    this.setState({ selectionMode: true })\n    this.props.onSelectionFinish!([...this.selectedItems])\n  }\n\n  isInIgnoreList(target: HTMLElement | null) {\n    if (!target) {\n      return\n    }\n\n    if (this.ignoreCheckCache.get(target) !== undefined) {\n      return this.ignoreCheckCache.get(target)\n    }\n\n    const shouldBeIgnored = this.ignoreListNodes.some(\n      ignoredNode => target === ignoredNode || ignoredNode.contains(target)\n    )\n\n    this.ignoreCheckCache.set(target, shouldBeIgnored)\n\n    return shouldBeIgnored\n  }\n\n  updateWhiteListNodes() {\n    this.ignoreListNodes = Array.from(document.querySelectorAll(this.ignoreList.join(', ')))\n  }\n\n  mouseDown = (e: Event) => {\n    const isNotLeftButtonClick =\n      !e.type.includes('touch') &&\n      !detectMouseButton(e as any, 1, {\n        allowAltClick: this.props.allowAltClick,\n        allowCtrlClick: this.props.allowCtrlClick,\n        allowMetaClick: this.props.allowMetaClick,\n        allowShiftClick: this.props.allowShiftClick\n      })\n    if (this.mouseDownStarted || this.props.disabled || isNotLeftButtonClick) {\n      return\n    }\n\n    this.updateWhiteListNodes()\n\n    if (this.isInIgnoreList(e.target as HTMLElement)) {\n      this.mouseDownStarted = false\n\n      return\n    }\n\n    if (this.props.resetOnStart) {\n      this.clearSelection()\n    }\n    this.mouseDownStarted = true\n    this.mouseUpStarted = false\n    const evt = castTouchToMouseEvent(e)\n\n    if (!this.props.globalMouse && !isNodeInRoot(evt.target as any, this.selectableGroup!)) {\n      const [offsetData] = getBoundsForNode(this.selectableGroup!)\n      const collides = doObjectsCollide(\n        {\n          top: offsetData.top,\n          left: offsetData.left,\n          width: 0,\n          height: 0,\n          offsetHeight: offsetData.offsetHeight,\n          offsetWidth: offsetData.offsetWidth\n        },\n        {\n          top: evt.pageY,\n          left: evt.pageX,\n          width: 0,\n          height: 0,\n          offsetWidth: 0,\n          offsetHeight: 0\n        }\n      )\n\n      if (!collides) {\n        return\n      }\n    }\n\n    this.updateRootBounds()\n    this.updateRegistry()\n\n    this.mouseDownData = {\n      target: evt.target as HTMLElement,\n      selectboxY: evt.clientY - this.scrollBounds!.top + this.scrollContainer!.scrollTop,\n      selectboxX: evt.clientX - this.scrollBounds!.left + this.scrollContainer!.scrollLeft\n    }\n\n    evt.preventDefault()\n\n    document.addEventListener('mousemove', this.updateSelectBox)\n    // document.addEventListener('touchmove', this.updateSelectBox)\n    document.addEventListener('mouseup', this.mouseUp)\n    document.addEventListener('touchend', this.mouseUp)\n  }\n\n  preventEvent(target: HTMLElement, type: string) {\n    const preventHandler = (evt: Event) => {\n      target.removeEventListener(type, preventHandler, true)\n      evt.preventDefault()\n      evt.stopPropagation()\n    }\n    target.addEventListener(type, preventHandler, true)\n  }\n\n  private mouseUp = (event: Event) => {\n    if (this.mouseUpStarted) {\n      return\n    }\n\n    this.mouseUpStarted = true\n    this.mouseDownStarted = false\n    this.removeTempEventListeners()\n\n    if (!this.mouseDownData) {\n      return\n    }\n\n    const evt: any = castTouchToMouseEvent(event)\n    const { pageX, pageY } = evt\n\n    if (!this.mouseMoved && isNodeInRoot(evt.target as HTMLElement, this.selectableGroup!)) {\n      this.handleClick(evt, pageY, pageX)\n    } else {\n      for (const item of this.selectingItems.values()) {\n        item.setState({ isSelected: true, isSelecting: false })\n      }\n      this.selectedItems = new Set([...this.selectedItems, ...this.selectingItems])\n      this.selectingItems.clear()\n\n      if (evt.which === 1 && this.mouseDownData.target === evt.target) {\n        this.preventEvent(evt.target, 'click')\n      }\n\n      this.selectbox!.setState({\n        isSelecting: false,\n        width: 0,\n        height: 0\n      })\n      this.props.onSelectionFinish!([...this.selectedItems])\n    }\n\n    this.toggleSelectionMode()\n    this.cleanUp()\n    this.mouseMoved = false\n  }\n\n  keyListener = (evt: KeyboardEvent) => {\n    if (evt.keyCode === 27) {\n      // escape\n      this.clearSelection()\n    }\n  }\n\n  cleanUp() {\n    this.deselectionStarted = false\n    this.selectionStarted = false\n\n    if (this.props.mixedDeselect) {\n      for (const item of this.registry.values()) {\n        item.deselected = false\n      }\n    }\n  }\n\n  getGroupRef = (ref: HTMLElement | null) => {\n    this.selectableGroup = ref\n  }\n\n  getSelectboxRef = (ref: Selectbox | null) => {\n    this.selectbox = ref\n  }\n\n  // eslint-disable-next-line react/sort-comp\n  defaultContainerStyle = {\n    position: 'relative'\n  }\n\n  contextValue = {\n    selectable: {\n      register: this.registerSelectable,\n      unregister: this.unregisterSelectable,\n      selectAll: this.selectAll,\n      clearSelection: this.clearSelection,\n      getScrolledContainer: () => this.scrollContainer\n    }\n  }\n\n  handleClick(evt: any, top: number, left: number) {\n    if (!this.props.selectOnClick) {\n      return\n    }\n\n    const { clickClassName, allowClickWithoutSelected, onSelectionFinish } = this.props\n    const classNames = (evt.target as HTMLElement).classList || []\n    const isMouseUpOnClickElement = Array.from(classNames).includes(clickClassName!)\n\n    if (\n      allowClickWithoutSelected ||\n      this.selectedItems.size ||\n      isMouseUpOnClickElement ||\n      evt.ctrlKey\n    ) {\n      this.selectItems(\n        {\n          top,\n          left,\n          width: 0,\n          height: 0,\n          offsetWidth: 0,\n          offsetHeight: 0\n        },\n        { isFromClick: true }\n      )\n\n      onSelectionFinish!([...this.selectedItems], this.clickedItem)\n\n      if (evt.which === 1) {\n        this.preventEvent(evt.target, 'click')\n      }\n      if (evt.which === 2 || evt.which === 3) {\n        this.preventEvent(evt.target, 'contextmenu')\n      }\n    }\n  }\n\n  render() {\n    const { selectionMode } = this.state\n    const {\n      component: GroupComponent = 'div',\n      className,\n      style,\n      selectionModeClass,\n      fixedPosition,\n      selectboxClassName,\n      children\n    } = this.props\n\n    return (\n      <SelectableGroupContext.Provider value={this.contextValue}>\n        <GroupComponent\n          ref={this.getGroupRef}\n          style={{ ...this.defaultContainerStyle, ...style }}\n          className={`${className} ${selectionMode ? selectionModeClass : ''}`}\n        >\n          <Selectbox\n            ref={this.getSelectboxRef}\n            className={selectboxClassName}\n            fixedPosition={fixedPosition!}\n          />\n          {children}\n        </GroupComponent>\n      </SelectableGroupContext.Provider>\n    )\n  }\n}\n\nexport default SelectableGroup\n","import React, { Component, ComponentType } from 'react'\nimport { bool } from 'prop-types'\n\nimport { getBoundsForNode, TComputedBounds, TGetBoundsForNodeArgs } from './utils'\nimport { TSelectableItemState } from './Selectable.types'\nimport SelectableGroupContext from './Context'\n\nconst createSelectable = (WrappedComponent: ComponentType<any>) =>\n  class SelectableItem extends Component<any, TSelectableItemState> {\n    static contextType = SelectableGroupContext\n\n    static propTypes = {\n      isSelected: bool\n    }\n\n    static defaultProps = {\n      isSelected: false\n    }\n\n    state = {\n      isSelected: this.props.isSelected,\n      isSelecting: false\n    }\n\n    node: HTMLElement | null = null\n\n    bounds: TComputedBounds[] | null = null\n\n    componentDidMount() {\n      this.registerSelectable()\n    }\n\n    componentWillUnmount() {\n      this.context.selectable.unregister(this)\n    }\n\n    registerSelectable = (containerScroll?: TGetBoundsForNodeArgs) => {\n      this.bounds = getBoundsForNode(this.node!, containerScroll)\n      this.context.selectable.register(this)\n    }\n\n    getSelectableRef = (ref: HTMLElement | null) => {\n      this.node = ref\n    }\n\n    render() {\n      return (\n        <WrappedComponent {...this.props} {...this.state} selectableRef={this.getSelectableRef} />\n      )\n    }\n  }\n\nexport default createSelectable\n","import React, { Component, ReactNode } from 'react'\nimport { ReactComponentLike } from 'prop-types'\n\nimport SelectableGroupContext from './Context'\n\ntype TSelectAllButton = {\n  children: ReactNode\n  component?: ReactComponentLike\n  className?: string\n  [key: string]: any\n}\n\nclass SelectAllButton extends Component<TSelectAllButton> {\n  static contextType = SelectableGroupContext\n\n  root: HTMLDivElement | null = null\n\n  componentDidMount() {\n    this.root!.addEventListener('mousedown', (evt: Event) => evt.stopPropagation())\n  }\n\n  getRootRef = (ref: HTMLDivElement | null) => {\n    this.root = ref\n  }\n\n  render() {\n    const { component: ButtonComponent = 'div', children, className = '', ...rest } = this.props\n\n    return (\n      <ButtonComponent\n        ref={this.getRootRef}\n        className={`selectable-select-all ${className}`}\n        onClick={this.context.selectable.selectAll}\n        {...rest}\n      >\n        {children}\n      </ButtonComponent>\n    )\n  }\n}\n\nexport default SelectAllButton\n","import React, { Component, ReactNode } from 'react'\nimport { ReactComponentLike } from 'prop-types'\n\nimport SelectableGroupContext from './Context'\n\ntype TDeselectAllButton = {\n  children: ReactNode\n  component?: ReactComponentLike\n  className?: string\n  [key: string]: any\n}\n\nclass DeselectAllButton extends Component<TDeselectAllButton> {\n  static contextType = SelectableGroupContext\n\n  root: HTMLDivElement | null = null\n\n  componentDidMount() {\n    this.root!.addEventListener('mousedown', (evt: Event) => evt.stopPropagation())\n  }\n\n  getRootRef = (ref: HTMLDivElement | null) => {\n    this.root = ref\n  }\n\n  render() {\n    const { component: ButtonComponent = 'div', children, className, ...rest } = this.props\n\n    return (\n      <ButtonComponent\n        ref={this.getRootRef}\n        className={`selectable-select-all ${className}`}\n        onClick={this.context.selectable.clearSelection}\n        {...rest}\n      >\n        {children}\n      </ButtonComponent>\n    )\n  }\n}\n\nexport default DeselectAllButton\n"],"sourceRoot":""}